I"5<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">use</span> <span class="nn">GuzzleHttp\Promise\Promise</span><span class="p">;</span>

<span class="nv">$promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
<span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span>
    <span class="c1">// $onFulfilled</span>
    <span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'The promise was fulfilled.'</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="c1">// $onRejected</span>
    <span class="k">function</span> <span class="p">(</span><span class="nv">$reason</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s1">'The promise was rejected.'</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">use</span> <span class="nn">GuzzleHttp\Promise\Promise</span><span class="p">;</span>

<span class="nv">$promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
<span class="nv">$promise</span>
    <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Return a value and don't break the chain</span>
        <span class="k">return</span> <span class="s2">"Hello, "</span> <span class="o">.</span> <span class="nv">$value</span><span class="p">;</span> <span class="c1">//创建一个新的promise实例，并且为之注册下一个then中的成功和失败的回调函数</span>
    <span class="p">})</span>
    <span class="c1">// This then is executed after the first then and receives the value</span>
    <span class="c1">// returned from the first then.</span>
    <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">});</span>

<span class="c1">// Resolving the promise triggers the $onFulfilled callbacks and outputs</span>
<span class="c1">// "Hello, reader".</span>
<span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">(</span><span class="s1">'reader.'</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
<span class="nv">$nextPromise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>

<span class="nv">$promise</span>
    <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$nextPromise</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$value</span><span class="p">;</span>
        <span class="k">return</span> <span class="nv">$nextPromise</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="o">-&gt;</span><span class="na">then</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">});</span>

<span class="c1">// Triggers the first callback and outputs "A"</span>
<span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">(</span><span class="s1">'A'</span><span class="p">);</span>
<span class="c1">// Triggers the second callback and outputs "B"</span>
<span class="nv">$nextPromise</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">(</span><span class="s1">'B'</span><span class="p">);</span>
</code></pre></div></div>

<p>关于wait</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Promise</span> <span class="p">{</span>
	<span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span>
        <span class="nx">callable</span> <span class="nv">$waitFn</span> <span class="o">=</span> <span class="kc">null</span><span class="p">,</span>
        <span class="nx">callable</span> <span class="nv">$cancelFn</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">waitFn</span> <span class="o">=</span> <span class="nv">$waitFn</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">cancelFn</span> <span class="o">=</span> <span class="nv">$cancelFn</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$promise</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// Calling wait will return the value of the promise.</span>
<span class="k">echo</span> <span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span> <span class="c1">// outputs "foo"</span>
</code></pre></div></div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="o">&amp;</span><span class="nv">$promise</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span> <span class="c1">// throws the exception.</span>
</code></pre></div></div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">die</span><span class="p">(</span><span class="s1">'this is not called!'</span><span class="p">);</span> <span class="p">});</span>
<span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">resolve</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
<span class="k">echo</span> <span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span> <span class="c1">// outputs "foo"</span>
</code></pre></div></div>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
<span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">reject</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
<span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span><span class="c1">//throws the exception.</span>
</code></pre></div></div>

<p>一个异步请求的例子</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">use</span> <span class="nn">GuzzleHttp\Client</span><span class="p">;</span>
<span class="kn">use</span> <span class="nn">GuzzleHttp\Pool</span><span class="p">;</span>
<span class="kn">use</span> <span class="nn">GuzzleHttp\Promise\Promise</span><span class="p">;</span>
<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">();</span>


<span class="nv">$request</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$total</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$uri</span> <span class="o">=</span> <span class="s1">'https://shanghai.anjuke.com/community/view/'</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$total</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="k">new</span> <span class="nx">\GuzzleHttp\Psr7\Request</span><span class="p">(</span><span class="s1">'Get'</span><span class="p">,</span> <span class="nv">$uri</span> <span class="o">.</span> <span class="nv">$i</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nv">$pool</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Pool</span><span class="p">(</span><span class="nv">$client</span><span class="p">,</span> <span class="nv">$request</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="p">[</span>
        <span class="s1">'concurrency'</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span>
        <span class="s1">'fulfilled'</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="nv">$index</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s1">'fulfilled '</span> <span class="o">.</span> <span class="nv">$index</span> <span class="o">.</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="s1">'rejected'</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$reason</span><span class="p">,</span> <span class="nv">$index</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s1">'rejected '</span> <span class="o">.</span> <span class="nv">$index</span> <span class="o">.</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>
        <span class="p">},</span>
    <span class="p">]</span>
<span class="p">);</span>

<span class="nv">$promise</span> <span class="o">=</span> <span class="nv">$pool</span><span class="o">-&gt;</span><span class="na">promise</span><span class="p">();</span>

<span class="nv">$promise</span><span class="o">-&gt;</span><span class="na">wait</span><span class="p">();</span>
</code></pre></div></div>

<p><img src="/images/201809/client.png" alt="client" /></p>

<p><img src="/images/201809/pool.png" alt="pool" /></p>

<p><img src="/images/201809/GuzzleHttp.png" alt="类图" /></p>

<p><img src="/images/201809/pool-promise.png" alt="pool-&gt;promise()时序图" /></p>

<p>wait时序图</p>

<p><img src="/images/201809/wait.png" alt="wait时序图" /></p>

<p>在FulfilledPromise和 RejectPromise中 then方法都会将成功或者失败回调加入到queue中，等待下一次run的时候执行这些task</p>

<p>疑问? 
<img src="/images/201809/promise_question.png" alt="question" /></p>

<p><img src="/images/201809/addPending.png" alt="question" />
<img src="/images/201809/advanceIterator.png" alt="question" />
<img src="/images/201809/next.png" alt="question" /></p>

<p>最终会执行 CurlMultiHandler 的 addRequest 方法 将新的request加入到 _mh中</p>

:ET