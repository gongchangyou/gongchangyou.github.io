<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mouse的博客</title>
		<description>记录学习生活工作的点滴</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>postgis</title>
				<description>&lt;h1 id=&quot;postgis&quot;&gt;Postgis&lt;/h1&gt;

&lt;p&gt;一个postgresql的扩展，空间数据库&lt;/p&gt;

&lt;h3 id=&quot;法1-docker安装&quot;&gt;法1： docker安装&lt;/h3&gt;

&lt;p&gt;1 &lt;a href=&quot;https://www.cnblogs.com/6324/p/11947388.html&quot;&gt;https://www.cnblogs.com/6324/p/11947388.html&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run
-v $(pwd)/data:/var/lib/postgresql/data -e POSTGRES_DB=&quot;openmaptiles&quot; -e POSTGRES_USER=&quot;test&quot; -e POSTGRES_PASSWORD=&quot;test&quot; -p 15432:5432 -d openmaptiles/postgis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2  因为上一步里面各种扩展都安装好了， 所以 这里我们就直接 操作DDL 和DML即可&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43374582&quot;&gt;https://zhuanlan.zhihu.com/p/43374582&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;具体操作面板在这&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/1646357982434.jpg&quot; alt=&quot;pgadmin&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3 如何批量导入数据？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/1646358797595.jpg&quot; alt=&quot;pgadmin&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#单个的写入point语句是这样的
insert into point_test (name,pt) values ('p1',ST_GeomFromText('Point(0 0 0)'));

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4 如何批量导入geometry字段类型的数据。以下可以看到 pt geometry字段是一堆字符串，如果已知三维坐标 恐怕无法自行写出那样的字符串.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/1646364305354.jpg&quot; alt=&quot;pgadmin&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;只能曲线救国了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 先在表里新增字段x, y，z （numeric）

2. 用csv把 x,y,z 字段导入

3. update 一把，将x,y,z 生成的point 写到pt字段中

    ```
    update point_test set pt = ST_SetSRID(ST_MakePoint(x,y,z),0) [where id=5];
    ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里导入的时候注意 csv中如果有标题的话 header，记得勾选header&lt;/p&gt;

&lt;p&gt;column 必须匹配，多一列pgsql就不认识了，导入不了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/1646369341367.jpg&quot; alt=&quot;pgadmin&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5 如何查看执行效率？性能？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	explain Analyze select id,name,ST_3DDistance(ST_GeomFromText('Point(0 0 0)'),pt)  from point_test;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;压测结果，导入了17000个点， 搜索距离最远的两个点&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select p1.id,p2.id, p1.name,p2.name,ST_3DDistance(p1.pt,p2.pt) as distance  from point_test as p1,point_test as p2 where p1.id &amp;gt; p2.id order by distance desc limit 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不加索引的情况下是53.4s,加了gist索引 还是 53.4s。 没生效？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://postgis.net/workshops/postgis-intro/indexing.html&quot;&gt;http://postgis.net/workshops/postgis-intro/indexing.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因为这个索引不是所有函数都能生效的，因为索引还是根据空间划分矩形，大部分是cover，intersect之类的功能&lt;/p&gt;

&lt;p&gt;至于用gist 还是spgist索引，取决于数据的稠密程度 &lt;a href=&quot;https://blog.crunchydata.com/blog/the-many-spatial-indexes-of-postgis&quot;&gt;https://blog.crunchydata.com/blog/the-many-spatial-indexes-of-postgis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;实际使用下来，1百万行，1000^3 的立方体中， 搜索在某个矩阵中的（10x10) 耗时是100ms左右，还是非常快的。如果不加索引的话，计算超时了都，估计1分钟之后都不会有结果。&lt;/p&gt;

&lt;p&gt;索引大小52M&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WITH xyz AS (
SELECT 1000*random() AS x, 1000*random() AS y, 1000*random() AS z
FROM generate_series(1, 1000)),
boxes AS (
  SELECT ST_3DMakeBox(ST_MakePoint(x-5, y-5, z-5),
    ST_MakePoint(x+5 ,y+5.1875, z+15)) AS geom
  FROM xyz
)
SELECT Count(*)
FROM points, boxes
WHERE points.geom &amp;amp;&amp;amp; boxes.geom;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有些点是否在某个不规则Polygon中的功能也可以使用该数据库&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/116091.html?utm_content=g_1000230851&amp;amp;spm=5176.20966629.toubu.3.f2991ddcpxxvD1#h2-st_makeenvelope&quot;&gt;https://help.aliyun.com/document_detail/116091.html?utm_content=g_1000230851&amp;amp;spm=5176.20966629.toubu.3.f2991ddcpxxvD1#h2-st_makeenvelope&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;法2以下的甭看了&quot;&gt;法2：以下的甭看了&lt;/h3&gt;

&lt;p&gt;源 /etc/apt/sources.list ， 如果无法安装，请变更源&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-cache search postgis
apt-get install postgis

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;以上这个一般来说搞不定因为源没有postgis-只能下载各种源码-比如postgis的源码-tar包解压缩之后&quot;&gt;以上这个一般来说搞不定，因为源没有postgis ，只能下载各种源码 ,比如postgis的源码 ，tar包解压缩之后&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;完事之后-还需要安装&quot;&gt;完事之后 还需要安装&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install postgresql-9.5-postgis-2.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一通折腾之后，算是安装完成了。&lt;/p&gt;

</description>
				<pubDate>Wed, 02 Mar 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/postgis</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/postgis</guid>
			</item>
		
			<item>
				<title>Postgresql</title>
				<description>&lt;h1 id=&quot;postgresql&quot;&gt;Postgresql&lt;/h1&gt;

&lt;h3 id=&quot;ubuntu-安装-postgresql&quot;&gt;ubuntu 安装 postgresql&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://linux.cn/article-11480-1.html&quot;&gt;https://linux.cn/article-11480-1.html&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;sudo apt update&lt;/li&gt;
  &lt;li&gt;sudo apt install postgresql postgresql-contrib&lt;/li&gt;
  &lt;li&gt;service postgresql start&lt;/li&gt;
  &lt;li&gt;sudo -s postgresql	 #切换用户&lt;/li&gt;
  &lt;li&gt;pgsql 	#登录PostgreSQL&lt;/li&gt;
  &lt;li&gt;ALTER USER postgres WITH PASSWORD ‘password’; # 初始化密码&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;安装gui--pgadmin&quot;&gt;安装GUI  pgadmin&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;docker pull dpage/pgadmin4&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;docker run -d -p 5433:80 –name pgadmin4 -e PGADMIN_DEFAULT_EMAIL=test@123.com -e PGADMIN_DEFAULT_PASSWORD=123456 -v /var/lib/pgadmin:/var/lib/pgadmin dpage/pgadmin4&lt;/p&gt;

    &lt;p&gt;注意这里的volume 绑定的位置，未来导入导出csv 可以使用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网页打开Localhost:5433 输入第二步的用户名密码&lt;/p&gt;

    &lt;p&gt;问题： create server 时发现 无法连接server&lt;/p&gt;

    &lt;p&gt;解决：去 /etc/postgresql/12/main下 修改 postgresql.conf 文件&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listen_addresses = '*' 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;重启postgresql : service postgresql restart&lt;/p&gt;

    &lt;p&gt;问题2： no pg_hba.conf entry for host “172.17.0.4”, … SSL on connection to server at “10.10.48.194”, port 5432&lt;/p&gt;

    &lt;p&gt;编辑 pg_hba.conf文件&lt;/p&gt;

    &lt;p&gt;把报错中的host 拷贝到这个文件中：如下编写&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/postgresql/12/main/pg_hba.conf
   
host all all 172.17.0.4/24 md5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把 安装postgresql 设置好的password 填入即可 这个界面还蛮好看的&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/WechatIMG31.png&quot; alt=&quot;set server list code&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Tue, 01 Mar 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/postgresql</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/postgresql</guid>
			</item>
		
			<item>
				<title>ssh</title>
				<description>&lt;h1 id=&quot;grafana&quot;&gt;grafana&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/grafana/grafana/&quot;&gt;https://github.com/grafana/grafana/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一个开源的系统监控软件，尤其是GPU和slurm的监控&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/grafana/grafana/issues/45710&quot;&gt;https://github.com/grafana/grafana/issues/45710&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看起来纵坐标和tooltip上的数值不太一样&lt;/p&gt;

&lt;p&gt;图表的配置在 /var/lib/grafana/dashboards/gpu-dashboard.json&lt;/p&gt;

&lt;p&gt;grep  GPU Power Usage&lt;/p&gt;

&lt;p&gt;stack 改成 false&lt;/p&gt;

&lt;p&gt;重启  grafana 。&lt;/p&gt;

&lt;p&gt;root        3180  0.0  0.0 2380228 59904 ?       Ssl  Feb16   1:54 /usr/bin/docker run –rm –network host –name docker.grafana.service -v /etc/grafana:/etc/grafana -v /var/lib/grafana:/var/lib/grafana grafana/grafana
472         3925  0.1  0.0 796740 70028 ?        Ssl  Feb16  15:57 grafana-server –homepath=/usr/share/grafana –config=/etc/grafana/grafana.ini –packaging=docker cfg:default.log.mode=console cfg:default.paths.data=/var/lib/grafana cfg:default.paths.logs=/var/log/grafana cfg:default.paths.plugins=/var/lib/grafana/plugins&lt;/p&gt;
</description>
				<pubDate>Fri, 25 Feb 2022 13:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/grafana</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/grafana</guid>
			</item>
		
			<item>
				<title>ssh</title>
				<description>&lt;h1 id=&quot;ssh-无密码访问&quot;&gt;ssh 无密码访问&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;apt-get install openssh-server&lt;/li&gt;
  &lt;li&gt;查看状态 service ssh status&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动ssh : systemctl start ssh  (关闭 systemctl stop ssh)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;将源server的 id_rsa.pub的内容拷贝到 ~/.ssh/authorized_keys文件夹中, authorized_keys 记得chmod 600&lt;/li&gt;
  &lt;li&gt;如果还是不行，再查看/etc/ssh/sshd_config文件中设置有StrictModes yes ,显式设置成 no&lt;/li&gt;
&lt;/ol&gt;

</description>
				<pubDate>Thu, 24 Feb 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/ssh</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/ssh</guid>
			</item>
		
			<item>
				<title>voice</title>
				<description>&lt;h1 id=&quot;python-ai语音合成&quot;&gt;python AI语音合成&lt;/h1&gt;

&lt;p&gt;https://mp.weixin.qq.com/s/ROETeFo4Q__8hkX9Ss-CAw 看到这篇报道。觉得可以试试将自己的语音变成语音包，这样就可以给自己读文章了，或者去喜马拉雅领任务。&lt;/p&gt;

&lt;p&gt;pyttsx3是一套基于实现SAPI5文语合成引擎的Python封装库，该库的设计者为Natesh M Bhat，该库其实是 &lt;a href=&quot;https://pypi.org/project/pyTTS/&quot;&gt;pyTTS&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/RapidWareTech/pyttsx&quot;&gt;pyttsx&lt;/a&gt; 项目的延续，pyttsx3主要是为Python3版本设计的，但同时也兼容Python2。JaysPySPEECH使用的是pyttsx3 2.7。&lt;/p&gt;

&lt;p&gt;但是因为依赖的是当前PC的语音环境，所以无法将我们自己的语音导入。&lt;/p&gt;

&lt;h2 id=&quot;mockingbird----貌似这个只是学习音色&quot;&gt;&lt;a href=&quot;https://github.com/babysor/MockingBird&quot;&gt;MockingBird&lt;/a&gt;  - 貌似这个只是学习音色&lt;/h2&gt;

&lt;p&gt;https://github.com/babysor/MockingBird/blob/main/README-CN.md&lt;/p&gt;

&lt;h2 id=&quot;注意第8步下载数据集非常大建议先做&quot;&gt;注意第8步下载数据集非常大，建议先做&lt;/h2&gt;

&lt;p&gt;我是ubuntu系统&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装 &lt;a href=&quot;https://pytorch.org/get-started/locally/&quot;&gt;PyTorch&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;先看本地有没有python.一般是python3了&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;再安装pip: apt install python3-pip&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装python torch  : pip3 install torch torchivision torchaudio&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;验证:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import torch
x = torch.rand(5,3)
print(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 &lt;a href=&quot;https://ffmpeg.org/download.html#get-packages&quot;&gt;ffmpeg&lt;/a&gt;。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;下载源码/source code 并解压缩&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;库的安装&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install -y autoconf automake build-essential git libass-dev libfreetype6-dev libsdl2-dev libtheora-dev libtool libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev pkg-config texinfo wget zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt install libavformat-dev
apt install libavcodec-dev
apt install libswresample-dev
apt install libswscale-dev
apt install libavutil-dev
apt install libsdl1.2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;如果没用的话 先 apt-get update, 再 apt-get install XXX.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装libx264&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install libx264-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;安装 yasm
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; apt-get install yasm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装 ffmpeg&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure   --enable-shared  --prefix=/usr/local/ffmpeg  --enable-gpl --enable-libx264 --extra-cflags=-I/usr/local/ffmpeg/include --extra-ldflags=-L/usr/local/ffmpeg/lib
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 MockingBird&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:babysor/MockingBird.git
   
cd MockingBird
#安装剩余的依赖
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 webrtcvad&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install webrtcvad-wheels
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 MockingBird/synthesizer 下新建文件夹 saved_models&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把下载到的或者训练好的 pt文件拷贝到 saved_models文件夹下&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器访问 localhost:8080 ， 如果端口被占用的话，可以修改default.py 变更 PORT&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下载数据集 &lt;a href=&quot;https://github.com/babysor/MockingBird/blob/main/README-CN.md#1%E6%95%B8%E6%93%9A%E9%9B%86%E5%93%AA%E8%A3%A1%E4%B8%8B%E8%BC%89&quot;&gt;https://github.com/babysor/MockingBird/blob/main/README-CN.md#1%E6%95%B8%E6%93%9A%E9%9B%86%E5%93%AA%E8%A3%A1%E4%B8%8B%E8%BC%89&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将上一部的数据集 放到某个文件夹下 &lt;datasets_root&gt;, 该解压的解压&lt;/datasets_root&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开工具&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python demo_toolbox.py -d &amp;lt;datasets_root&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果第十步报错 ”you do not have any of the recognized datasets in XXX“ ，我们打开文件 /toolbaox/__init__.py看看 里面的 recognized_datasets数组 ，可能需要调整 数据集的路径.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果报错 size mismatch https://github.com/babysor/MockingBird/issues/37 一个兼容性的问题&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这个是我最近一个修复导致的不兼容问题， 你可以把文件中：synthesizer/utils/symbols.py 第11行的内容 改为：
_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz12340!\'(),-.:;? '
即可。暂时先不要关闭这个issue吧。我看下遇到的人太多的话我做个兼容
   
不同的模型(*.pt) 这里可能还要改回去
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;演示视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1uh411B7AD/&quot;&gt;https://www.bilibili.com/video/BV1uh411B7AD/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;可是实际操作下来上传了我的音频转换成一段刺耳的声音无法将中文text-转换成音频&quot;&gt;可是实际操作下来，上传了我的音频，转换成一段刺耳的声音，无法将中文text 转换成音频&lt;/h3&gt;

</description>
				<pubDate>Tue, 22 Feb 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/voice-clone</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/voice-clone</guid>
			</item>
		
			<item>
				<title>voice</title>
				<description>&lt;h1 id=&quot;python-ai语音合成&quot;&gt;python AI语音合成&lt;/h1&gt;

&lt;p&gt;https://mp.weixin.qq.com/s/ROETeFo4Q__8hkX9Ss-CAw 看到这篇报道。觉得可以试试将自己的语音变成语音包，这样就可以给自己读文章了，或者去喜马拉雅领任务。&lt;/p&gt;

&lt;p&gt;pyttsx3是一套基于实现SAPI5文语合成引擎的Python封装库，该库的设计者为Natesh M Bhat，该库其实是 &lt;a href=&quot;https://pypi.org/project/pyTTS/&quot;&gt;pyTTS&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/RapidWareTech/pyttsx&quot;&gt;pyttsx&lt;/a&gt; 项目的延续，pyttsx3主要是为Python3版本设计的，但同时也兼容Python2。JaysPySPEECH使用的是pyttsx3 2.7。&lt;/p&gt;

&lt;p&gt;但是因为依赖的是当前PC的语音环境，所以无法将我们自己的语音导入。&lt;/p&gt;

&lt;h2 id=&quot;mockingbird---貌似这个只是学习音色&quot;&gt;&lt;a href=&quot;https://github.com/babysor/MockingBird&quot;&gt;MockingBird&lt;/a&gt; - 貌似这个只是学习音色&lt;/h2&gt;

&lt;p&gt;https://github.com/babysor/MockingBird/blob/main/README-CN.md&lt;/p&gt;

&lt;h2 id=&quot;注意第8步下载数据集非常大建议先做&quot;&gt;注意第8步下载数据集非常大，建议先做&lt;/h2&gt;

&lt;p&gt;我是ubuntu系统&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装 &lt;a href=&quot;https://pytorch.org/get-started/locally/&quot;&gt;PyTorch&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;先看本地有没有python.一般是python3了&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;再安装pip: apt install python3-pip&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装python torch  : pip3 install torch torchivision torchaudio&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;验证:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import torch
x = torch.rand(5,3)
print(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 &lt;a href=&quot;https://ffmpeg.org/download.html#get-packages&quot;&gt;ffmpeg&lt;/a&gt;。&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;下载源码/source code 并解压缩&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;库的安装&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install -y autoconf automake build-essential git libass-dev libfreetype6-dev libsdl2-dev libtheora-dev libtool libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev pkg-config texinfo wget zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt install libavformat-dev
apt install libavcodec-dev
apt install libswresample-dev
apt install libswscale-dev
apt install libavutil-dev
apt install libsdl1.2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;如果没用的话 先 apt-get update, 再 apt-get install XXX.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装libx264&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install libx264-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;安装 yasm
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; apt-get install yasm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装 ffmpeg&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure   --enable-shared  --prefix=/usr/local/ffmpeg  --enable-gpl --enable-libx264 --extra-cflags=-I/usr/local/ffmpeg/include --extra-ldflags=-L/usr/local/ffmpeg/lib
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 MockingBird&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:babysor/MockingBird.git
   
cd MockingBird
#安装剩余的依赖
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装 webrtcvad&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install webrtcvad-wheels
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 MockingBird/synthesizer 下新建文件夹 saved_models&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把下载到的或者训练好的 pt文件拷贝到 saved_models文件夹下&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器访问 localhost:8080 ， 如果端口被占用的话，可以修改default.py 变更 PORT&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下载数据集 &lt;a href=&quot;https://github.com/babysor/MockingBird/blob/main/README-CN.md#1%E6%95%B8%E6%93%9A%E9%9B%86%E5%93%AA%E8%A3%A1%E4%B8%8B%E8%BC%89&quot;&gt;https://github.com/babysor/MockingBird/blob/main/README-CN.md#1%E6%95%B8%E6%93%9A%E9%9B%86%E5%93%AA%E8%A3%A1%E4%B8%8B%E8%BC%89&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将上一部的数据集 放到某个文件夹下 &lt;datasets_root&gt;, 该解压的解压&lt;/datasets_root&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开工具&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python demo_toolbox.py -d &amp;lt;datasets_root&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果第十步报错 ”you do not have any of the recognized datasets in XXX“ ，我们打开文件 /toolbaox/__init__.py看看 里面的 recognized_datasets数组 ，可能需要调整 数据集的路径.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果报错 size mismatch https://github.com/babysor/MockingBird/issues/37 一个兼容性的问题&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这个是我最近一个修复导致的不兼容问题， 你可以把文件中：synthesizer/utils/symbols.py 第11行的内容 改为：
_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz12340!\'(),-.:;? '
即可。暂时先不要关闭这个issue吧。我看下遇到的人太多的话我做个兼容
   
不同的模型(*.pt) 这里可能还要改回去
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;演示视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1uh411B7AD/&quot;&gt;https://www.bilibili.com/video/BV1uh411B7AD/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;可是实际操作下来上传了我的音频转换成一段刺耳的声音无法将中文text-转换成音频&quot;&gt;可是实际操作下来，上传了我的音频，转换成一段刺耳的声音，无法将中文text 转换成音频&lt;/h3&gt;
</description>
				<pubDate>Sun, 20 Feb 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/voice-synthesis</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/voice-synthesis</guid>
			</item>
		
			<item>
				<title>spring mvc</title>
				<description>&lt;h1 id=&quot;spring-mvc-获取url路径和读取本地文件&quot;&gt;spring MVC 获取url路径和读取本地文件&lt;/h1&gt;

&lt;h2 id=&quot;获取路径&quot;&gt;获取路径&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@RequestMapping(&quot;/{animal}/{fileName}&quot;)
    public String getJson(
            @PathVariable String animal,
            @PathVariable String fileName
    ) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;读取本地文件&quot;&gt;读取本地文件&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    String fullPath = String.format(directory, animal, fileName);
	String content = Files.readString(Paths.get(fullPath));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sat, 19 Feb 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/spring-MVC</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/spring-MVC</guid>
			</item>
		
			<item>
				<title>nacos serverlist</title>
				<description>&lt;h1 id=&quot;nacos-serverlist--endpoint&quot;&gt;nacos serverList &amp;amp; endpoint&lt;/h1&gt;

&lt;h2 id=&quot;两种设置nacos-服务地址的方式&quot;&gt;两种设置nacos 服务地址的方式&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;生产环境的话，我们一般使用endpoint 固定域名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试环境我们可以指定server-addr&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644977241350.jpg&quot; alt=&quot;config&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644977146089.jpg&quot; alt=&quot;set server list&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;优先选择server list, 如果没有配置，则请求http://域名/nacos/serverlist 接口获取 nacos注册服务器列表
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644977321417.jpg&quot; alt=&quot;set server list code&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Wed, 16 Feb 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/alibaba-nacos-client-server</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/alibaba-nacos-client-server</guid>
			</item>
		
			<item>
				<title>kryo</title>
				<description>&lt;h1 id=&quot;dubbo-序列化配置-kryo&quot;&gt;dubbo 序列化配置 Kryo&lt;/h1&gt;

&lt;p&gt;注意版本要跟  dubbo-spring-boot-starter 相同,2.7.8&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-serialization-kryo --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;dubbo-serialization-kryo&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.7.8&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在producer 和 consumer加一句配置即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dubbo.protocol.serialization=kryo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原理：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;我们配置的序列化框架 比如 kryo , 这个字符串”kryo”是设置在了ProtocolConfig中&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;真正需要序列化的时候，是由AbstractCodec 根据 ExtensionLoader.getExtension 获取&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ExtensionLoader 中有个属性叫 cachedClasses,  是个map，会创建type名到类的映射&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; private final Holder&amp;lt;Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt;&amp;gt; cachedClasses = new Holder&amp;lt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;那么 cachedClasses 是何时 初始化的呢？这里涉及到 SPI .  ExtensionLoader 会去扫描 文件夹 META-INF/dubbo/internal下的所有 Serialization的实现类。 即文件名是 org.apache.dubbo.common.serialize.Serialization 的 文件。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#文件 org.apache.dubbo.common.serialize.Serialization 的内容 kryo就是name
kryo=org.apache.dubbo.common.serialize.kryo.KryoSerialization
kryo2=org.apache.dubbo.common.serialize.kryo.optimized.KryoSerialization2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; private Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; loadExtensionClasses() {
         cacheDefaultExtensionName();

         Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; extensionClasses = new HashMap&amp;lt;&amp;gt;();

         for (LoadingStrategy strategy : strategies) {
             loadDirectory(extensionClasses, strategy.directory(), type.getName(), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());
             loadDirectory(extensionClasses, strategy.directory(), type.getName().replace(&quot;org.apache&quot;, &quot;com.alibaba&quot;), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());
         }

         return extensionClasses;
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最终在 saveInExtensionClass 方法中 把 class 和name的映射设置好&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644917724845.jpg&quot; alt=&quot;set class&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题：&lt;/p&gt;

&lt;p&gt;本来想看看默认序列化是如何设置的，有两种方法&lt;/p&gt;

&lt;p&gt;法1，在SPI注解上加属性 ，由属性控制&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1645257330444.jpg&quot; alt=&quot;1&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;法2，设置一个Constants类, 将默认值填进去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1645257359049.jpg&quot; alt=&quot;1&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在就是初始化的时候是根据SPI的value，但是获取实现类的时候又用到了Constants类，让人有点疑惑，两个默认值&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1645257426431.jpg&quot; alt=&quot;1&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/WechatIMG587.png&quot; alt=&quot;1&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然由Constants类我们还能知道 默认的nio库是 netty&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    String DEFAULT_TRANSPORTER = &quot;netty&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Tue, 15 Feb 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/dubbo-kryo</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/dubbo-kryo</guid>
			</item>
		
			<item>
				<title>spring-cloud-gateway</title>
				<description>&lt;h1 id=&quot;spring-cloud-gateway&quot;&gt;Spring-cloud-gateway&lt;/h1&gt;

&lt;h2 id=&quot;路由规则如果配置在applicationyaml中那么每次新增路由都需要部署重启gateway所以这个路由规则必须动态读取例如存放到nacos中&quot;&gt;路由规则如果配置在application.yaml中，那么每次新增路由都需要部署重启gateway，所以这个路由规则必须动态读取，例如存放到nacos中&lt;/h2&gt;

&lt;p&gt;代码仓库:   &lt;a href=&quot;https://github.com/gongchangyou/gateway&quot;&gt;https://github.com/gongchangyou/gateway&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;http服务 &lt;a href=&quot;https://github.com/gongchangyou/dubbo-demo-producer&quot;&gt;https://github.com/gongchangyou/dubbo-demo-producer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RouteDefinitionWriter 负责修改路由， RouteDefinitionLocator 接口只有一个方法 getRouteDefinitions，获取所有路由。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter-webflux&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-cloud-starter-gateway&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644386286460.jpg&quot; alt=&quot;code&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;重点是 routeDefinitionWriter.save(Mono.just(routeDefinition)).subscribe();&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//        this.publisher.publishEvent(new RefreshRoutesEvent(this)); 这句好像没啥用
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nacos-代码只需要添加nacos的listener又因为数据变更时只会执行一次回调没有心跳我们需要自行编写心跳逻辑&quot;&gt;Nacos: 代码只需要添加nacos的listener，又因为数据变更时只会执行一次回调，没有心跳，我们需要自行编写心跳逻辑&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-discovery&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;2.2.7.RELEASE&amp;lt;/version&amp;gt;
			&amp;lt;exclusions&amp;gt;
				&amp;lt;exclusion&amp;gt;
					&amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
					&amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
				&amp;lt;/exclusion&amp;gt;
			&amp;lt;/exclusions&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-config&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;2.2.7.RELEASE&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-cloud-starter-loadbalancer&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Component
@Slf4j
public class NacosRouteDynamicDataSource implements ApplicationRunner {
    @Autowired
    private NacosConfigManager configManager;

    private ConfigService configService;
    @PostConstruct
    void init () {
        configService = configManager.getConfigService();
    }
    /**
     * Callback used to run the bean.
     *
     * @param args incoming application arguments
     * @throws Exception on error
     */
    @Override
    public void run(ApplicationArguments args) throws Exception {
        log.info(args.toString());
        //监听nacos配置变化
        dynamicRouteByNacosListener(&quot;gateway-dynamic-route-rule.json&quot;, &quot;gateway-dynamic-route-rule&quot;);
        //心跳 顺便 初始化
        while (true) {
            String configInfo = configService.getConfig(&quot;gateway-dynamic-route-rule.json&quot;, &quot;gateway-dynamic-route-rule&quot;, 4000);
            log.info(&quot;configInfo = {}&quot;, configInfo);
            Thread.sleep(2000);
        }
    }

    /**
     * 监听nacos的配置
     * @param dataId
     * @param group
     */
    public void dynamicRouteByNacosListener (String dataId, String group){
        try {
            configService.addListener(dataId, group, new Listener()  {
                @Override
                public void receiveConfigInfo(String configInfo) {
                    log.info(&quot;进行网关更新:\n\r{}&quot;,configInfo);
                }
                @Override
                public Executor getExecutor() {
                    log.info(&quot;getExecutor\n\r&quot;);
                    return null;
                }
            });
        } catch (NacosException e) {
            log.error(&quot;从nacos接收动态路由配置出错!!!&quot;,e);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在nacos手动配置路由&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644471609530.jpg&quot; alt=&quot;nacos config&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Thu, 10 Feb 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/spring-cloud-gateway</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/spring-cloud-gateway</guid>
			</item>
		
	</channel>
</rss>
