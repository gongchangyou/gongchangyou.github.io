<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mouse的博客</title>
		<description>记录学习生活工作的点滴</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>spring mvc</title>
				<description>&lt;h1 id=&quot;spring-mvc-获取url路径和读取本地文件&quot;&gt;spring MVC 获取url路径和读取本地文件&lt;/h1&gt;

&lt;h2 id=&quot;获取路径&quot;&gt;获取路径&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@RequestMapping(&quot;/{animal}/{fileName}&quot;)
    public String getJson(
            @PathVariable String animal,
            @PathVariable String fileName
    ) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;读取本地文件&quot;&gt;读取本地文件&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    String fullPath = String.format(directory, animal, fileName);
	String content = Files.readString(Paths.get(fullPath));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sat, 19 Feb 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/spring-MVC</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/spring-MVC</guid>
			</item>
		
			<item>
				<title>nacos serverlist</title>
				<description>&lt;h1 id=&quot;nacos-serverlist--endpoint&quot;&gt;nacos serverList &amp;amp; endpoint&lt;/h1&gt;

&lt;h2 id=&quot;两种设置nacos-服务地址的方式&quot;&gt;两种设置nacos 服务地址的方式&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;生产环境的话，我们一般使用endpoint 固定域名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试环境我们可以指定server-addr&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644977241350.jpg&quot; alt=&quot;config&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644977146089.jpg&quot; alt=&quot;set server list&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;优先选择server list, 如果没有配置，则请求http://域名/nacos/serverlist 接口获取 nacos注册服务器列表
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644977321417.jpg&quot; alt=&quot;set server list code&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Wed, 16 Feb 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/alibaba-nacos-client-server</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/alibaba-nacos-client-server</guid>
			</item>
		
			<item>
				<title>kryo</title>
				<description>&lt;h1 id=&quot;dubbo-序列化配置-kryo&quot;&gt;dubbo 序列化配置 Kryo&lt;/h1&gt;

&lt;p&gt;注意版本要跟  dubbo-spring-boot-starter 相同,2.7.8&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-serialization-kryo --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;dubbo-serialization-kryo&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.7.8&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在producer 和 consumer加一句配置即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dubbo.protocol.serialization=kryo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原理：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;我们配置的序列化框架 比如 kryo , 这个字符串”kryo”是设置在了ProtocolConfig中&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;真正需要序列化的时候，是由AbstractCodec 根据 ExtensionLoader.getExtension 获取&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ExtensionLoader 中有个属性叫 cachedClasses,  是个map，会创建type名到类的映射&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; private final Holder&amp;lt;Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt;&amp;gt; cachedClasses = new Holder&amp;lt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;那么 cachedClasses 是何时 初始化的呢？这里涉及到 SPI .  ExtensionLoader 会去扫描 文件夹 META-INF/dubbo/internal下的所有 Serialization的实现类。 即文件名是 org.apache.dubbo.common.serialize.Serialization 的 文件。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#文件 org.apache.dubbo.common.serialize.Serialization 的内容 kryo就是name
kryo=org.apache.dubbo.common.serialize.kryo.KryoSerialization
kryo2=org.apache.dubbo.common.serialize.kryo.optimized.KryoSerialization2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; private Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; loadExtensionClasses() {
         cacheDefaultExtensionName();

         Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; extensionClasses = new HashMap&amp;lt;&amp;gt;();

         for (LoadingStrategy strategy : strategies) {
             loadDirectory(extensionClasses, strategy.directory(), type.getName(), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());
             loadDirectory(extensionClasses, strategy.directory(), type.getName().replace(&quot;org.apache&quot;, &quot;com.alibaba&quot;), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());
         }

         return extensionClasses;
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最终在 saveInExtensionClass 方法中 把 class 和name的映射设置好&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644917724845.jpg&quot; alt=&quot;set class&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题：&lt;/p&gt;

&lt;p&gt;本来想看看默认序列化是如何设置的，有两种方法&lt;/p&gt;

&lt;p&gt;法1，在SPI注解上加属性 ，由属性控制&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1645257330444.jpg&quot; alt=&quot;1&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;法2，设置一个Constants类, 将默认值填进去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1645257359049.jpg&quot; alt=&quot;1&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在就是初始化的时候是根据SPI的value，但是获取实现类的时候又用到了Constants类，让人有点疑惑，两个默认值&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1645257426431.jpg&quot; alt=&quot;1&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/WechatIMG587.png&quot; alt=&quot;1&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然由Constants类我们还能知道 默认的nio库是 netty&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    String DEFAULT_TRANSPORTER = &quot;netty&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Tue, 15 Feb 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/dubbo-kryo</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/dubbo-kryo</guid>
			</item>
		
			<item>
				<title>spring-cloud-gateway</title>
				<description>&lt;h1 id=&quot;spring-cloud-gateway&quot;&gt;Spring-cloud-gateway&lt;/h1&gt;

&lt;h2 id=&quot;路由规则如果配置在applicationyaml中那么每次新增路由都需要部署重启gateway所以这个路由规则必须动态读取例如存放到nacos中&quot;&gt;路由规则如果配置在application.yaml中，那么每次新增路由都需要部署重启gateway，所以这个路由规则必须动态读取，例如存放到nacos中&lt;/h2&gt;

&lt;p&gt;代码仓库:   &lt;a href=&quot;https://github.com/gongchangyou/gateway&quot;&gt;https://github.com/gongchangyou/gateway&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;http服务 &lt;a href=&quot;https://github.com/gongchangyou/dubbo-demo-producer&quot;&gt;https://github.com/gongchangyou/dubbo-demo-producer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RouteDefinitionWriter 负责修改路由， RouteDefinitionLocator 接口只有一个方法 getRouteDefinitions，获取所有路由。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-starter-webflux&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-cloud-starter-gateway&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644386286460.jpg&quot; alt=&quot;code&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;重点是 routeDefinitionWriter.save(Mono.just(routeDefinition)).subscribe();&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//        this.publisher.publishEvent(new RefreshRoutesEvent(this)); 这句好像没啥用
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nacos-代码只需要添加nacos的listener又因为数据变更时只会执行一次回调没有心跳我们需要自行编写心跳逻辑&quot;&gt;Nacos: 代码只需要添加nacos的listener，又因为数据变更时只会执行一次回调，没有心跳，我们需要自行编写心跳逻辑&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-discovery&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;2.2.7.RELEASE&amp;lt;/version&amp;gt;
			&amp;lt;exclusions&amp;gt;
				&amp;lt;exclusion&amp;gt;
					&amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
					&amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
				&amp;lt;/exclusion&amp;gt;
			&amp;lt;/exclusions&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-config&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;2.2.7.RELEASE&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-cloud-starter-loadbalancer&amp;lt;/artifactId&amp;gt;
		&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Component
@Slf4j
public class NacosRouteDynamicDataSource implements ApplicationRunner {
    @Autowired
    private NacosConfigManager configManager;

    private ConfigService configService;
    @PostConstruct
    void init () {
        configService = configManager.getConfigService();
    }
    /**
     * Callback used to run the bean.
     *
     * @param args incoming application arguments
     * @throws Exception on error
     */
    @Override
    public void run(ApplicationArguments args) throws Exception {
        log.info(args.toString());
        //监听nacos配置变化
        dynamicRouteByNacosListener(&quot;gateway-dynamic-route-rule.json&quot;, &quot;gateway-dynamic-route-rule&quot;);
        //心跳 顺便 初始化
        while (true) {
            String configInfo = configService.getConfig(&quot;gateway-dynamic-route-rule.json&quot;, &quot;gateway-dynamic-route-rule&quot;, 4000);
            log.info(&quot;configInfo = {}&quot;, configInfo);
            Thread.sleep(2000);
        }
    }

    /**
     * 监听nacos的配置
     * @param dataId
     * @param group
     */
    public void dynamicRouteByNacosListener (String dataId, String group){
        try {
            configService.addListener(dataId, group, new Listener()  {
                @Override
                public void receiveConfigInfo(String configInfo) {
                    log.info(&quot;进行网关更新:\n\r{}&quot;,configInfo);
                }
                @Override
                public Executor getExecutor() {
                    log.info(&quot;getExecutor\n\r&quot;);
                    return null;
                }
            });
        } catch (NacosException e) {
            log.error(&quot;从nacos接收动态路由配置出错!!!&quot;,e);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在nacos手动配置路由&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202202/1644471609530.jpg&quot; alt=&quot;nacos config&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Thu, 10 Feb 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/spring-cloud-gateway</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/spring-cloud-gateway</guid>
			</item>
		
			<item>
				<title>slf4j</title>
				<description>&lt;h1 id=&quot;slf4j--logback&quot;&gt;slf4j &amp;amp; logback&lt;/h1&gt;

&lt;p&gt;slf4j是基于门面模式的日志模块，logback是其中的一个实现，另个常用的是log4j&lt;/p&gt;

&lt;p&gt;去年log4j 的漏洞整怕了，还是用logback实现吧。&lt;/p&gt;

&lt;p&gt;有几个常用的slf4j和logback相关模块&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;logback-classic 日志的实现 ，内置logback-core&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;logback-access &lt;a href=&quot;https://logback.qos.ch/access.html#configuration&quot;&gt;https://logback.qos.ch/access.html#configuration&lt;/a&gt; 可以在 &lt;em&gt;$TOMCAT_HOME/conf/server.xml&lt;/em&gt; 中添加&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Connector port=&quot;8050&quot; 
  handler.list=&quot;mx&quot;
  mx.enabled=&quot;true&quot; 
  mx.httpHost=&quot;localhost&quot; 
  mx.httpPort=&quot;8082&quot; 
  protocol=&quot;AJP/1.3&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;访问模块与 Servlet 容器集成提供通过 Http 来访问日记的功能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;logstash-logback-encoder 以json格式来保存日志&lt;/li&gt;
  &lt;li&gt;lombok 可以使用@Slf4j注解，避免每个类中都写LoggerFactory&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Logback-spring.xml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;debug=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 控制台输出 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;conversionRule&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;conversionWord=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;converterClass=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.boot.logging.logback.ColorConverter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;conversionRule&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;conversionWord=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wex&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;converterClass=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;conversionRule&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;conversionWord=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wEx&quot;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;converterClass=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 按照每天生成日志文件 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;${LOGS_DIR}/service.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--日志文件输出的文件名--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;FileNamePattern&amp;gt;&lt;/span&gt;${LOGS_DIR}/service.%d{yyyy-MM-dd}.%i.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FileNamePattern&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--日志文件保留天数--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;maxFileSize&amp;gt;&lt;/span&gt;5GB&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maxFileSize&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss.SSS}┇%-5level┇[%thread]┇%logger{50}┇%msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 在日志配置级别的基础上过滤掉warn级别以下的日志 --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;level&amp;gt;&lt;/span&gt;WARN&lt;span class=&quot;nt&quot;&gt;&amp;lt;/level&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%d{yyyy-MM-dd HH:mm:ss.SSS}┇%-5level┇[%thread]┇%logger{50}┇%msg%n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;springProfile&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INFO&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STDOUT&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/springProfile&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;记得在 application.properties中添加如下参数，或者启动项中添加，这样springProfile能生效&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.profiles.active=dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Tue, 08 Feb 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/02/slf4j-logback</link>
				<guid isPermaLink="true">http://localhost:4000/2022/02/slf4j-logback</guid>
			</item>
		
			<item>
				<title>spring cloud stream</title>
				<description>&lt;h1 id=&quot;spring-cloud-stream---rocketmq&quot;&gt;Spring Cloud Stream  &amp;amp; RocketMQ&lt;/h1&gt;

&lt;h2 id=&quot;rocketmq有两种实现方式&quot;&gt;RocketMQ有两种实现方式&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Rocketmq-spring-boot-starter 框架 (rocketmq &amp;amp;&amp;amp; spring-boot)&lt;/li&gt;
  &lt;li&gt;Spring-cloud-starter-stream-rocketmq 框架。 推荐使用这种，因为spring-cloud-stream 集成多种MQ &lt;a href=&quot;https://spring.io/projects/spring-cloud-stream&quot;&gt;https://spring.io/projects/spring-cloud-stream&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我选择版本2.2.7.RELEASE: &lt;a href=&quot;https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-stream-rocketmq&quot;&gt;https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-stream-rocketmq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意处理冲突和添加依赖，我这边缺少了  spring-boot-actuator-autoconfigure&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-actuator-autoconfigure --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-actuator-autoconfigure&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.3.12.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sample &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-stream-samples&quot;&gt;https://github.com/spring-cloud/spring-cloud-stream-samples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码很简单
&lt;img src=&quot;/images/202201/1643521131415.jpg&quot; alt=&quot;embbed&quot; width=&quot;1000&quot; /&gt;
&lt;img src=&quot;/images/202201/1643521145955.jpg&quot; alt=&quot;embbed&quot; width=&quot;1000&quot; /&gt;
&lt;img src=&quot;/images/202201/1643521166242.jpg&quot; alt=&quot;embbed&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876
spring.cloud.stream.bindings.output1.destination=test-topic #主题 topic
spring.cloud.stream.bindings.output1.content-type=application/json

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;消费者&quot;&gt;消费者&lt;/h2&gt;

&lt;p&gt;配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876
spring.cloud.stream.bindings.input1.destination=test-topic
spring.cloud.stream.bindings.input1.content-type=application/json
spring.cloud.stream.bindings.input1.group=group
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202201/1643523658805.jpg&quot; alt=&quot;embbed&quot; width=&quot;1000&quot; /&gt;
&lt;img src=&quot;/images/202201/1643523559576.jpg&quot; alt=&quot;embbed&quot; width=&quot;1000&quot; /&gt;
&lt;img src=&quot;/images/202201/1643523584792.jpg&quot; alt=&quot;embbed&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

&lt;p&gt;调试ok&lt;/p&gt;

</description>
				<pubDate>Fri, 28 Jan 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/01/Spring-Cloud-Stream(RocketMQ)</link>
				<guid isPermaLink="true">http://localhost:4000/2022/01/Spring-Cloud-Stream(RocketMQ)</guid>
			</item>
		
			<item>
				<title>jira</title>
				<description>&lt;h1 id=&quot;jira-部署&quot;&gt;Jira 部署&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;下载bin文件 &lt;a href=&quot;https://www.atlassian.com/software/jira/update&quot;&gt;https://www.atlassian.com/software/jira/update&lt;/a&gt;  8.12.0&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建db&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;creat database jira

create user 'jira'@'%' IDENTIFIED BY 'password';

grant all privileges on jira.* to 'jira'@'%';

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;mysql connector jar包  &lt;a href=&quot;https://mvnrepository.com/artifact/mysql/mysql-connector-java/8.0.27&quot;&gt;https://mvnrepository.com/artifact/mysql/mysql-connector-java/8.0.27&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;破解jar包 &lt;a href=&quot;https://www.cnblogs.com/houchaoying/p/9096118.html&quot;&gt;https://www.cnblogs.com/houchaoying/p/9096118.html&lt;/a&gt; 拉到最下面&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;cd /opt/atlassian/jira/bin&lt;/li&gt;
  &lt;li&gt;sh startup.sh&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;又&quot;&gt;又&lt;/h1&gt;

&lt;p&gt;卸载是在 /opt/atlassian/jira/uninstall&lt;/p&gt;

&lt;p&gt;关闭是在  /opt/atlassian/jira/bin/shutdown.sh&lt;/p&gt;

</description>
				<pubDate>Mon, 24 Jan 2022 14:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/01/jira</link>
				<guid isPermaLink="true">http://localhost:4000/2022/01/jira</guid>
			</item>
		
			<item>
				<title>matomo</title>
				<description>&lt;h1 id=&quot;matomo-部署&quot;&gt;Matomo 部署&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull matomo

docker run --restart=always -d --name matomo -p 7777:80 -v /opt/matomo/data:/data -v /opt/matomo/html:/var/www/html matomo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mysql新建db 和用户&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;creat database matomo

create user 'matomo'@'%' IDENTIFIED BY 'password';

grant all privileges on matomo.* to 'matomo'@'%';

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是因为宿主机已经安装了 mysql 。 所以需要matomo能够访问宿主机的db&lt;/p&gt;

&lt;p&gt;在宿主机 ifconfig 命令后 。发现一个docker0 的网桥，记住他的ip 172.17.0.1&lt;/p&gt;

&lt;p&gt;在localhost:7777 中设置 database的时候 将 刚刚的ip[172.17.0.1]当成 host贴进去，应该就ok了.&lt;/p&gt;

&lt;p&gt;因为默认端口是80，咱们这里改成了7777 所以有可能需要去配置下
vi /var/www/html/config/config.ini.php&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[General]
trusted_hosts[] = &quot;10.10.48.194:7777&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若是反向代理的话，需要获取用户ip，需要修改 html/core/IP.php&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static function getIpFromHeader()
{
    ...
    
    if(isset($_SERVER['HTTP_X_REAL_IP'])) { //获取header中的ip
        $default = $_SERVER['HTTP_X_REAL_IP'];
    }
    
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Mon, 24 Jan 2022 14:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/01/matomo</link>
				<guid isPermaLink="true">http://localhost:4000/2022/01/matomo</guid>
			</item>
		
			<item>
				<title>rocket mq</title>
				<description>&lt;h1 id=&quot;rocketmq-部署&quot;&gt;RocketMQ 部署&lt;/h1&gt;

&lt;p&gt;基础术语：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;生产者(Producer)&lt;/li&gt;
  &lt;li&gt;消费者(Consumer)&lt;/li&gt;
  &lt;li&gt;主题（Topic)  一类消息的集合&lt;/li&gt;
  &lt;li&gt;生产者组（Producer Group) 这类Producer 发送同一类消息。如果发送事务消息，且原始生产者在发送后崩溃，Broker Server 会联系同一组的生产者实例提交或回溯消费&lt;/li&gt;
  &lt;li&gt;消费者组（Consumer Group) 消费同一类消息，注意同一个group的消费者必须订阅相同的topic。可以方便的负载均衡和容错&lt;/li&gt;
  &lt;li&gt;代理服务器（Broker Server)  负责存储和转发消息，还存储元数据，包括消费者组、进度偏移、主题和队列消息&lt;/li&gt;
  &lt;li&gt;名字服务器 （Name Server) 路由消息的提供者。 根据主题获取 Broker IP 的地址列表&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考 &lt;a href=&quot;https://www.cnblogs.com/fx-blog/p/11732749.html&quot;&gt;https://www.cnblogs.com/fx-blog/p/11732749.html&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;下载RocketMQ zip包 &lt;a href=&quot;https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.9.2/rocketmq-all-4.9.2-bin-release.zip&quot;&gt;https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.9.2/rocketmq-all-4.9.2-bin-release.zip&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;先启动 name service
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  nohup sh bin/mqnamesrv &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;再启动 broker service. 注意 vi bin/runbroker.sh 里面的 -Xms 内存要求是8g
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  nohup sh bin/mqbroker -n localhost:9876 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试下 是否可以正常生产、消费&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export NAMESRV_ADDR=localhost:9876
sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
   
sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;关闭服务器
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;停止 broker：sh bin/mqshutdown broker
停止 nameserver：sh bin/mqshutdown namesrv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;控制台启动&quot;&gt;控制台启动&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;下载 控制台安装包 注意现在拆分出来了 &lt;a href=&quot;https://github.com/apache/rocketmq-dashboard&quot;&gt;https://github.com/apache/rocketmq-dashboard&lt;/a&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:apache/rocketmq-dashboard.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;看  readme 直接 docker 搞起&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; docker pull apacherocketmq/rocketmq-dashboard:latest

 ## 注意这里看看本地端口哪个可用，我这里用了8081
 docker run -d --name rocketmq-dashboard -e &quot;JAVA_OPTS=-Drocketmq.namesrv.addr=192.168.1.145:9876&quot; -p 8081:8080 -t apacherocketmq/rocketmq-dashboard:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;如果是docker启动的话，上面Drocketmq.namesrv.addr参数直接用127.0.0.1:9876 会让dashboard无法连接到本地的9876端口，只能说docker容器中的 127.0.0.1 9876 不是宿主机的那个&lt;/p&gt;

    &lt;p&gt;如果是自行打包并且启动jar包的话，应该是用127.0.0.1 没问题的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;浏览器打开 localhost:8081&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/202201/1642757861082.jpg&quot; alt=&quot;embbed&quot; width=&quot;1000&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Fri, 21 Jan 2022 14:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/01/RocketMQ</link>
				<guid isPermaLink="true">http://localhost:4000/2022/01/RocketMQ</guid>
			</item>
		
			<item>
				<title>cluster</title>
				<description>&lt;h1 id=&quot;spring-cloud-alibaba---nacos-5-集群部署&quot;&gt;Spring Cloud Alibaba - nacos 5 集群部署&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html&quot;&gt;https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;域名 + SLB模式(内网SLB，不可暴露到公网，以免带来安全风险)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/202201/deployDnsVipMode.jpeg&quot; alt=&quot;embbed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置 cluster.conf
nacos应该会将注册服务同步给其他ip&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```
#it is ip
#example
192.168.1.145:8848
192.168.1.146:8848

```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;线上环境使用 外置数据源 &lt;a href=&quot;https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql&quot;&gt;https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改 db的url和帐号密码  并打jar包 &lt;a href=&quot;https://github.com/alibaba/nacos/blob/master/distribution/conf/application.properties&quot;&gt;https://github.com/alibaba/nacos/blob/master/distribution/conf/application.properties&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重启nacos&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh startup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;又-如果-第2步选择了内置数据源&quot;&gt;又： 如果 第2步选择了内置数据源&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh startup.sh -p embedded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Thu, 20 Jan 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/01/nacos-cluster</link>
				<guid isPermaLink="true">http://localhost:4000/2022/01/nacos-cluster</guid>
			</item>
		
	</channel>
</rss>
