<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mouse的博客</title>
		<description>记录学习生活工作的点滴</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>git</title>
				<description>&lt;h1 id=&quot;git-批量迁移&quot;&gt;git 批量迁移&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;先找到每个分支最近一次提交的记录， 并按照提交时间排序, tformat 最后会有换行符，比 format好用一些。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git br -vvr |awk '{print $1}' |xargs -I {} git log {} --pretty=tformat:&quot;%C(cyan)%at %C(cyan)%ad %C(yellow)%h %C(magenta)%d %C(reset)%s %C(green)[%an]&quot;  -1 --date=iso | sort
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;找到最后一行 (如下任1命令)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1.awk 'END {print}'

 2.sed -n '$p'

 3.sed '$!N;$!D'

 4.awk '{b=a&quot;\n&quot;$0;a=$0}END{print b}'

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;找到最近一次提交的分支的记录&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git br -vvr |awk '{print $1}' |xargs -I {} git log {} --pretty=tformat:&quot;%C(cyan)%at %C(cyan)%ad %C(yellow)%h %C(magenta)%d %C(reset)%s %C(green)[%an]&quot;  -1 --date=iso | sort|awk 'END {print}' 
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sed提取出分支&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#获取最近一次提交
	log=$(git br -vvr |awk '{print $1}' |xargs -I {} git log {} --pretty=tformat:&quot;%C(cyan)%at %C(cyan)%ad %C(yellow)%h %C(magenta)%d %C(reset)%s %C(green)[%an]&quot;  -1 --date=iso | sort|awk 'END {print}') 
	#获取分支名
	echo $log
	branchname=$(echo $log |sed 's/.*(\(.*\)).*/\1/' | awk -F',' '{print $NF}' | sed 's/origin\/\(.*\)/\1/') 
    
	echo $branchname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
				<pubDate>Fri, 08 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/git-clone</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/git-clone</guid>
			</item>
		
			<item>
				<title>prometheus</title>
				<description>&lt;h1 id=&quot;prometheus&quot;&gt;prometheus&lt;/h1&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://www.prometheus.wang/quickstart/why-monitor.html&quot;&gt;https://www.prometheus.wang/quickstart/why-monitor.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://prometheus.io/docs/introduction/overview/&quot;&gt;https://prometheus.io/docs/introduction/overview/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202207/architecture.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://yunlzheng.gitbook.io/prometheus-book/part-ii-prometheus-jin-jie/exporter/custom_exporter_with_java/client_library_java&quot;&gt;java client 接入&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;跟 &lt;a href=&quot;/2022/05/monitor&quot;&gt;Statsd&lt;/a&gt; 的区别 :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;statsd是主动udp上报，推的形式. 而prometheus是 提供http接口供 prometheus server pull， 是拉的形式。&lt;/li&gt;
  &lt;li&gt;statsd 协议提供一些常用的metric的类型，通常有timer、counter、gauge和set四种。这样就无需在java client中自行处理&lt;/li&gt;
&lt;/ol&gt;

</description>
				<pubDate>Thu, 07 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/prometheus</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/prometheus</guid>
			</item>
		
			<item>
				<title>pdfreader</title>
				<description>&lt;h1 id=&quot;pdfbox&quot;&gt;pdfbox&lt;/h1&gt;

&lt;p&gt;添加依赖&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;!-- https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.pdfbox&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;pdfbox&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.0.0-alpha3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;遍历文件夹&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; String path = &quot;/path/to/pdf&quot;;		//要遍历的路径
        File file = new File(path);		//获取其file对象
        File[] fs = file.listFiles();	//遍历path下的文件和目录，放在File数组中
        for(File f:fs){					//遍历File[]数组
            if(!f.isDirectory()) {        //若非目录(即文件)，则打印
//                System.out.println(f);
                parse(f);
            }
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;逐页读取&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; try {
        PDDocument document = Loader.loadPDF(file);
        if (!document.isEncrypted()) {
            PDFTextStripper stripper = new PDFTextStripper();
            var lastNo = &quot;&quot;;
            var goodOffset = 1;

            for(int i = 1; i&amp;lt;=document.getNumberOfPages(); i ++){
                stripper.setSortByPosition(true);
                stripper.setStartPage(i);
                stripper.setEndPage(i);

                String text = stripper.getText(document);
            }
            
        }
    } catch (IOException e) {
        e.printStackTrace();
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 06 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/pdfreader</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/pdfreader</guid>
			</item>
		
			<item>
				<title>python docker</title>
				<description>&lt;h1 id=&quot;python-docker&quot;&gt;python docker&lt;/h1&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://www.runoob.com/docker/docker-install-python.html&quot;&gt;https://www.runoob.com/docker/docker-install-python.html&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Tue, 05 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/python-docker</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/python-docker</guid>
			</item>
		
			<item>
				<title>storm</title>
				<description>&lt;h1 id=&quot;storm&quot;&gt;Storm&lt;/h1&gt;

&lt;p&gt;storm是个流数据的处理框架&lt;/p&gt;

&lt;p&gt;写在前面：当然我还是推荐使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.alibaba.jstorm&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;jstorm-core&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;他山之石: &lt;a href=&quot;https://gitee.com/HuQingmiao/storm-demo&quot;&gt;https://gitee.com/HuQingmiao/storm-demo&lt;/a&gt;  直接就能跑起来&lt;/p&gt;

&lt;p&gt;但是因为我维护的还是个老项目，所以必须使用如下依赖&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.storm&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;storm-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码仓库：&lt;a href=&quot;https://github.com/gongchangyou/storm-test&quot;&gt;https://github.com/gongchangyou/storm-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意这是一个maven项目 不是spring项目&lt;/p&gt;

&lt;p&gt;参考文章:  &lt;a href=&quot;https://zhuanlan.zhihu.com/p/140806701&quot;&gt;https://zhuanlan.zhihu.com/p/140806701&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xuwujing/p/8584684.html&quot;&gt;https://www.cnblogs.com/xuwujing/p/8584684.html&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Mon, 04 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/storm</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/storm</guid>
			</item>
		
			<item>
				<title>mysql log</title>
				<description>&lt;h1 id=&quot;mysql-log&quot;&gt;mysql log&lt;/h1&gt;

&lt;p&gt;代码仓库： &lt;a href=&quot;https://github.com/gongchangyou/transactional&quot;&gt;https://github.com/gongchangyou/transactional&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果是mybatis plus, 一行搞定
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果是 jpa 。基于 org.springframework.data.repository.CrudRepository;  如何添加日志呢？&lt;/p&gt;

    &lt;p&gt;注意到 JdbcTemplate.execute 方法中有个 logger.isDebugEnabled() 判断
 &lt;img src=&quot;/images/202206/WechatIMG294.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;那就配置下 logging.level.root 就行&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; logging.level.root=DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;如果是mybatis 1.3.1 看到代码没有注入log的地方。只能把断点加到 CachingExecutor.query 方法中 看 boundSql变量了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG295.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Thu, 30 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/mysql-log</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/mysql-log</guid>
			</item>
		
			<item>
				<title>maven settings</title>
				<description>&lt;h1 id=&quot;maven-settings&quot;&gt;maven settings&lt;/h1&gt;

&lt;p&gt;设置 settings.xml&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn -s &quot;D:\program\maven-3.6.3\maven3\conf\settings.xml&quot; clean install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看当前生效的 settings&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn help:effective-settings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mvn命令指定 settings&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn install --settings c:\user\settings.xml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 29 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/mvn-settings</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/mvn-settings</guid>
			</item>
		
			<item>
				<title>mongodb</title>
				<description>&lt;h1 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h1&gt;

&lt;p&gt;代码仓库：&lt;/p&gt;

&lt;p&gt;Java 代码 chunk逻辑&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class SplitListToChunks {
 
    public static &amp;lt;T&amp;gt; List&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; split(List&amp;lt;T&amp;gt; list, int size) {
        final AtomicInteger counter = new AtomicInteger();
        return new ArrayList&amp;lt;&amp;gt;(
                list.stream()
                        .collect(Collectors.groupingBy(it -&amp;gt; counter.getAndIncrement() / size))
                        .values());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;batch 搜索&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Test
    public void batchGet() {
        val table =db.getCollection(&quot;records&quot;);
        val ids = new ArrayList&amp;lt;&amp;gt;();
        for (int i = 20140000; i &amp;lt;20147282; i++) {
            ids.add(String.valueOf(i));
        }
        val chunkedList = split(ids, 100);
        val firstStart = System.currentTimeMillis();
        for (val list : chunkedList) {
            val start = System.currentTimeMillis();
            BasicDBObject query = new BasicDBObject(&quot;id&quot;, new BasicDBObject(&quot;$in&quot;,list) );
            table.find(query).forEach((Consumer&amp;lt;Document&amp;gt;) document -&amp;gt;{
                log.info(&quot;id={}, loc={}&quot;,document.get(&quot;id&quot;),  document.get(&quot;loc&quot;));
            });
            log.info(&quot;cost={}&quot;, System.currentTimeMillis()- start);
        }
        log.info(&quot;allcost={}&quot;, System.currentTimeMillis()- firstStart);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;批量编辑 关键字 $set&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bson f = Filters.and(Filters.eq(&quot;id&quot;, 2),Filters.eq(&quot;name&quot;, &quot;Eric2&quot;));
        //成功只更新name字段
        db.getCollection(&quot;user&quot;).updateMany(f, new Document(&quot;$set&quot;,
                new HashMap&amp;lt;&amp;gt;()
        ));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;批量追加 关键字 $addToSet&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bson f = Filters.and(Filters.eq(&quot;id&quot;, 3),Filters.eq(&quot;name&quot;, &quot;Eric3&quot;));
        db.getCollection(&quot;user&quot;).updateMany(f, new Document(&quot;$addToSet&quot;,
                new HashMap&amp;lt;&amp;gt;()
        ));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;批量追加  合并数组. 关键字 $each&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//$each 关键字 在array类型的field中追加 多个element
        db.getCollection(&quot;user&quot;).updateMany(f, new Document(&quot;$addToSet&quot;,
                new HashMap&amp;lt;&amp;gt;() );
                    }});
                }}
        ));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;单独修改数组中的某个值 .$&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//.$ 的意思就是数组的下标
        Bson f5 = Filters.and(Filters.eq(&quot;id&quot;, 5), Filters.eq(&quot;nickname&quot;, &quot;c5&quot;));
        db.getCollection(&quot;user&quot;).updateMany(f5, new Document(&quot;$set&quot;, new HashMap&amp;lt;&amp;gt;() ));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://www.mongodb.com/docs/manual/reference/operator/update/addToSet/&quot;&gt;https://www.mongodb.com/docs/manual/reference/operator/update/addToSet/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.modb.pro/db/73050&quot;&gt;https://www.modb.pro/db/73050&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37612448/mongodb-error-the-positional-operator-did-not-find-the-match-needed-from-the-qu&quot;&gt;https://stackoverflow.com/questions/37612448/mongodb-error-the-positional-operator-did-not-find-the-match-needed-from-the-qu&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 27 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/mongodb-batch</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/mongodb-batch</guid>
			</item>
		
			<item>
				<title>es cluster</title>
				<description>&lt;h1 id=&quot;es-集群&quot;&gt;ES 集群&lt;/h1&gt;

&lt;p&gt;java访问ES 集群，两种方法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;推荐 走内网虚拟ip(VIP) 参考文章： &lt;a href=&quot;https://cloud.tencent.com/document/product/845/19538&quot;&gt;https://cloud.tencent.com/document/product/845/19538&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;配置虚拟ip的命令:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0:1 192.168.0.107 netmask 255.255.0.0
        
#下线虚拟ip
ifconfig eth0:1 down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把cluster node都添加到client中,类似下面的代码&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RestHighLevelClient client = new RestHighLevelClient(
                 RestClient.builder(
                 		//Es连接信息，我用的是伪集群哈哈哈
                         new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;),
                         new HttpHost(&quot;localhost&quot;, 9201, &quot;http&quot;),
                         new HttpHost(&quot;localhost&quot;, 9202, &quot;http&quot;)
                 )
         );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
				<pubDate>Fri, 24 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/ES-cluster</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/ES-cluster</guid>
			</item>
		
			<item>
				<title>sentinel</title>
				<description>&lt;h1 id=&quot;sentinel&quot;&gt;Sentinel&lt;/h1&gt;

&lt;p&gt;简介： 是对资源（服务，方法）访问的规则配置。 比如流控，黑白名单等&lt;/p&gt;

&lt;p&gt;官网: &lt;a href=&quot;https://github.com/alibaba/Sentinel&quot;&gt;https://github.com/alibaba/Sentinel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://www.jianshu.com/p/8f901abb7af4&quot;&gt;https://www.jianshu.com/p/8f901abb7af4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码仓库: &lt;a href=&quot;https://github.com/gongchangyou/sentinel_test&quot;&gt;https://github.com/gongchangyou/sentinel_test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;实现较为简单 不赘述了。&lt;/p&gt;

&lt;p&gt;注意点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果blockHandlerClass是另外的类，记得把 blockHandler 方法设置成static 方法&lt;/li&gt;
  &lt;li&gt;blockHandler 方法记得添加 BlockException exception 形参&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sat, 11 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/sentinel</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/sentinel</guid>
			</item>
		
	</channel>
</rss>
