<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mouse的博客</title>
		<description>记录学习生活工作的点滴</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>pdfreader</title>
				<description>&lt;h1 id=&quot;pdfbox&quot;&gt;pdfbox&lt;/h1&gt;

&lt;p&gt;添加依赖&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;!-- https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.pdfbox&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;pdfbox&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.0.0-alpha3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;遍历文件夹&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; String path = &quot;/path/to/pdf&quot;;		//要遍历的路径
        File file = new File(path);		//获取其file对象
        File[] fs = file.listFiles();	//遍历path下的文件和目录，放在File数组中
        for(File f:fs){					//遍历File[]数组
            if(!f.isDirectory()) {        //若非目录(即文件)，则打印
//                System.out.println(f);
                parse(f);
            }
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;逐页读取&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; try {
        PDDocument document = Loader.loadPDF(file);
        if (!document.isEncrypted()) {
            PDFTextStripper stripper = new PDFTextStripper();
            var lastNo = &quot;&quot;;
            var goodOffset = 1;

            for(int i = 1; i&amp;lt;=document.getNumberOfPages(); i ++){
                stripper.setSortByPosition(true);
                stripper.setStartPage(i);
                stripper.setEndPage(i);

                String text = stripper.getText(document);
            }
            
        }
    } catch (IOException e) {
        e.printStackTrace();
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 06 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/pdfreader</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/pdfreader</guid>
			</item>
		
			<item>
				<title>python docker</title>
				<description>&lt;h1 id=&quot;python-docker&quot;&gt;python docker&lt;/h1&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://www.runoob.com/docker/docker-install-python.html&quot;&gt;https://www.runoob.com/docker/docker-install-python.html&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Tue, 05 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/python-docker</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/python-docker</guid>
			</item>
		
			<item>
				<title>storm</title>
				<description>&lt;h1 id=&quot;storm&quot;&gt;Storm&lt;/h1&gt;

&lt;p&gt;storm是个流数据的处理框架&lt;/p&gt;

&lt;p&gt;写在前面：当然我还是推荐使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.alibaba.jstorm&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;jstorm-core&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;他山之石: &lt;a href=&quot;https://gitee.com/HuQingmiao/storm-demo&quot;&gt;https://gitee.com/HuQingmiao/storm-demo&lt;/a&gt;  直接就能跑起来&lt;/p&gt;

&lt;p&gt;但是因为我维护的还是个老项目，所以必须使用如下依赖&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.storm&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;storm-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码仓库：&lt;a href=&quot;https://github.com/gongchangyou/storm-test&quot;&gt;https://github.com/gongchangyou/storm-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意这是一个maven项目 不是spring项目&lt;/p&gt;

&lt;p&gt;参考文章:  &lt;a href=&quot;https://zhuanlan.zhihu.com/p/140806701&quot;&gt;https://zhuanlan.zhihu.com/p/140806701&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xuwujing/p/8584684.html&quot;&gt;https://www.cnblogs.com/xuwujing/p/8584684.html&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Mon, 04 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/storm</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/storm</guid>
			</item>
		
			<item>
				<title>mysql log</title>
				<description>&lt;h1 id=&quot;mysql-log&quot;&gt;mysql log&lt;/h1&gt;

&lt;p&gt;代码仓库： &lt;a href=&quot;https://github.com/gongchangyou/transactional&quot;&gt;https://github.com/gongchangyou/transactional&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果是mybatis plus, 一行搞定
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果是 jpa 。基于 org.springframework.data.repository.CrudRepository;  如何添加日志呢？&lt;/p&gt;

    &lt;p&gt;注意到 JdbcTemplate.execute 方法中有个 logger.isDebugEnabled() 判断
 &lt;img src=&quot;/images/202206/WechatIMG294.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;那就配置下 logging.level.root 就行&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; logging.level.root=DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;如果是mybatis 1.3.1 看到代码没有注入log的地方。只能把断点加到 CachingExecutor.query 方法中 看 boundSql变量了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG295.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Thu, 30 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/mysql-log</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/mysql-log</guid>
			</item>
		
			<item>
				<title>maven settings</title>
				<description>&lt;h1 id=&quot;maven-settings&quot;&gt;maven settings&lt;/h1&gt;

&lt;p&gt;设置 settings.xml&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn -s &quot;D:\program\maven-3.6.3\maven3\conf\settings.xml&quot; clean install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看当前生效的 settings&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn help:effective-settings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mvn命令指定 settings&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn install --settings c:\user\settings.xml 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 29 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/mvn-settings</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/mvn-settings</guid>
			</item>
		
			<item>
				<title>mongodb</title>
				<description>&lt;h1 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h1&gt;

&lt;p&gt;代码仓库：&lt;/p&gt;

&lt;p&gt;Java 代码 chunk逻辑&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class SplitListToChunks {
 
    public static &amp;lt;T&amp;gt; List&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; split(List&amp;lt;T&amp;gt; list, int size) {
        final AtomicInteger counter = new AtomicInteger();
        return new ArrayList&amp;lt;&amp;gt;(
                list.stream()
                        .collect(Collectors.groupingBy(it -&amp;gt; counter.getAndIncrement() / size))
                        .values());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;batch 搜索&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Test
    public void batchGet() {
        val table =db.getCollection(&quot;records&quot;);
        val ids = new ArrayList&amp;lt;&amp;gt;();
        for (int i = 20140000; i &amp;lt;20147282; i++) {
            ids.add(String.valueOf(i));
        }
        val chunkedList = split(ids, 100);
        val firstStart = System.currentTimeMillis();
        for (val list : chunkedList) {
            val start = System.currentTimeMillis();
            BasicDBObject query = new BasicDBObject(&quot;id&quot;, new BasicDBObject(&quot;$in&quot;,list) );
            table.find(query).forEach((Consumer&amp;lt;Document&amp;gt;) document -&amp;gt;{
                log.info(&quot;id={}, loc={}&quot;,document.get(&quot;id&quot;),  document.get(&quot;loc&quot;));
            });
            log.info(&quot;cost={}&quot;, System.currentTimeMillis()- start);
        }
        log.info(&quot;allcost={}&quot;, System.currentTimeMillis()- firstStart);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;批量编辑 关键字 $set&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bson f = Filters.and(Filters.eq(&quot;id&quot;, 2),Filters.eq(&quot;name&quot;, &quot;Eric2&quot;));
        //成功只更新name字段
        db.getCollection(&quot;user&quot;).updateMany(f, new Document(&quot;$set&quot;,
                new HashMap&amp;lt;&amp;gt;()
        ));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;批量追加 关键字 $addToSet&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bson f = Filters.and(Filters.eq(&quot;id&quot;, 3),Filters.eq(&quot;name&quot;, &quot;Eric3&quot;));
        db.getCollection(&quot;user&quot;).updateMany(f, new Document(&quot;$addToSet&quot;,
                new HashMap&amp;lt;&amp;gt;()
        ));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;批量追加  合并数组. 关键字 $each&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//$each 关键字 在array类型的field中追加 多个element
        db.getCollection(&quot;user&quot;).updateMany(f, new Document(&quot;$addToSet&quot;,
                new HashMap&amp;lt;&amp;gt;() );
                    }});
                }}
        ));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;单独修改数组中的某个值 .$&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//.$ 的意思就是数组的下标
        Bson f5 = Filters.and(Filters.eq(&quot;id&quot;, 5), Filters.eq(&quot;nickname&quot;, &quot;c5&quot;));
        db.getCollection(&quot;user&quot;).updateMany(f5, new Document(&quot;$set&quot;, new HashMap&amp;lt;&amp;gt;() ));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://www.mongodb.com/docs/manual/reference/operator/update/addToSet/&quot;&gt;https://www.mongodb.com/docs/manual/reference/operator/update/addToSet/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.modb.pro/db/73050&quot;&gt;https://www.modb.pro/db/73050&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 27 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/mongodb-batch</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/mongodb-batch</guid>
			</item>
		
			<item>
				<title>es cluster</title>
				<description>&lt;h1 id=&quot;es-集群&quot;&gt;ES 集群&lt;/h1&gt;

&lt;p&gt;java访问ES 集群，两种方法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;推荐 走内网虚拟ip(VIP) 参考文章： &lt;a href=&quot;https://cloud.tencent.com/document/product/845/19538&quot;&gt;https://cloud.tencent.com/document/product/845/19538&lt;/a&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;配置虚拟ip的命令:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifconfig eth0:1 192.168.0.107 netmask 255.255.0.0
        
#下线虚拟ip
ifconfig eth0:1 down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把cluster node都添加到client中,类似下面的代码&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RestHighLevelClient client = new RestHighLevelClient(
                 RestClient.builder(
                 		//Es连接信息，我用的是伪集群哈哈哈
                         new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;),
                         new HttpHost(&quot;localhost&quot;, 9201, &quot;http&quot;),
                         new HttpHost(&quot;localhost&quot;, 9202, &quot;http&quot;)
                 )
         );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
				<pubDate>Fri, 24 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/ES-cluster</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/ES-cluster</guid>
			</item>
		
			<item>
				<title>sentinel</title>
				<description>&lt;h1 id=&quot;sentinel&quot;&gt;Sentinel&lt;/h1&gt;

&lt;p&gt;简介： 是对资源（服务，方法）访问的规则配置。 比如流控，黑白名单等&lt;/p&gt;

&lt;p&gt;官网: &lt;a href=&quot;https://github.com/alibaba/Sentinel&quot;&gt;https://github.com/alibaba/Sentinel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://www.jianshu.com/p/8f901abb7af4&quot;&gt;https://www.jianshu.com/p/8f901abb7af4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码仓库: &lt;a href=&quot;https://github.com/gongchangyou/sentinel_test&quot;&gt;https://github.com/gongchangyou/sentinel_test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;实现较为简单 不赘述了。&lt;/p&gt;

&lt;p&gt;注意点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果blockHandlerClass是另外的类，记得把 blockHandler 方法设置成static 方法&lt;/li&gt;
  &lt;li&gt;blockHandler 方法记得添加 BlockException exception 形参&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sat, 11 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/sentinel</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/sentinel</guid>
			</item>
		
			<item>
				<title>canal RocketMQ</title>
				<description>&lt;h1 id=&quot;canal-导入rocketmq&quot;&gt;canal 导入RocketMQ&lt;/h1&gt;

&lt;p&gt;项目地址： &lt;a href=&quot;https://github.com/alibaba/canal/&quot;&gt;https://github.com/alibaba/canal/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2022/03/RocketMQ-docker&quot;&gt;启动RocketMQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2022/06/canal&quot;&gt;部署canal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改源码的canal.properties ，但是没生效&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG268.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这些实现类是用SPI加载的&lt;/p&gt;

&lt;p&gt;CanalLauncher.java -》 CanalStarter.java&lt;/p&gt;

&lt;p&gt;追进去看到 classLoader 会去 target/plugin 文件夹中读取class。找不到再走META-INF/canal/xxx.CanalMQProducuer&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG269.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把如下注释掉就行了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG270.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在canal源码中的配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#这个不用动
canal.destinations = example
#这个是mq的主题，这个保证和rocketMQ的消费端的主题一致即可
canal.mq.topic=test-topic

#模式从 tcp 改成 rocketMQ
canal.serverMode = rocketMQ

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在消费端的rocketMQ的配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876
spring.cloud.stream.bindings.input1.destination=test-topic
spring.cloud.stream.bindings.input1.content-type=application/json
spring.cloud.stream.bindings.input1.group=group
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2022-06-11 10:11:29.366  INFO 2493 --- [MessageThread_1] com.mouse.canal_test.rocketmq.Consumer   : payload={&quot;data&quot;:[{&quot;id&quot;:&quot;5&quot;,&quot;count&quot;:&quot;13&quot;}],&quot;database&quot;:&quot;store_db&quot;,&quot;es&quot;:1654874446000,&quot;id&quot;:1,&quot;isDdl&quot;:false,&quot;mysqlType&quot;:{&quot;id&quot;:&quot;int&quot;,&quot;count&quot;:&quot;int&quot;},&quot;old&quot;:[{&quot;count&quot;:&quot;313&quot;}],&quot;pkNames&quot;:[&quot;id&quot;],&quot;sql&quot;:&quot;&quot;,&quot;sqlType&quot;:{&quot;id&quot;:4,&quot;count&quot;:4},&quot;table&quot;:&quot;store&quot;,&quot;ts&quot;:1654911313692,&quot;type&quot;:&quot;UPDATE&quot;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG312.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;红色圈 data中是完整的一行新值&lt;/li&gt;
  &lt;li&gt;绿色的是主键id&lt;/li&gt;
  &lt;li&gt;蓝色的那个只是消息自增id，不是主键&lt;/li&gt;
  &lt;li&gt;old 中的是这次修改的字段的旧值&lt;/li&gt;
&lt;/ol&gt;

</description>
				<pubDate>Fri, 10 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/canal-RocketMQ</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/canal-RocketMQ</guid>
			</item>
		
			<item>
				<title>canal</title>
				<description>&lt;h1 id=&quot;canal&quot;&gt;canal&lt;/h1&gt;

&lt;p&gt;项目地址： &lt;a href=&quot;https://github.com/alibaba/canal/&quot;&gt;https://github.com/alibaba/canal/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;前提&quot;&gt;前提&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/2022/03/mysql-docker&quot;&gt;docker部署MySQL&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开启binlog 写入&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;修改my.cnf 。一般路径在/etc/mysql/my.cnf&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [mysqld]
 log-bin=mysql-bin # 开启 binlog
 binlog-format=ROW # 选择 ROW 模式
 server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建canal账号&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  CREATE USER canal IDENTIFIED BY 'canal';  
  GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';
  -- GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;
  FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;启动canal&quot;&gt;启动canal&lt;/h3&gt;

&lt;p&gt;因为Mysql是docker启动的，如果canal也是docker启动，可能会需要搭建网桥。所以这里我们直接在宿主机上直接启动canal. &lt;a href=&quot;https://github.com/alibaba/canal/wiki/QuickStart&quot;&gt;QuickStart&lt;/a&gt; 这里介绍的很清楚&lt;/p&gt;

&lt;p&gt;注意观察 bin/startup.sh脚本中的配置文件路径，默认是 canal.properties&lt;/p&gt;

&lt;p&gt;目前1.1.6有点问题，见下面的问题2&lt;/p&gt;

&lt;p&gt;我是clone代码 &lt;a href=&quot;https://github.com/alibaba/canal&quot;&gt;https://github.com/alibaba/canal&lt;/a&gt; 之后稍微改了下， 在IDEA中手动启动java进程.&lt;/p&gt;

&lt;h3 id=&quot;测试代码仓库&quot;&gt;测试代码仓库&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gongchangyou/canal_test&quot;&gt;https://github.com/gongchangyou/canal_test&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;效果&quot;&gt;效果&lt;/h3&gt;

&lt;p&gt;在某张表更新了一行记录，可以从canal的客户端中获取变更。&lt;/p&gt;

&lt;p&gt;客户端解析protobuf格式的ByteString.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG266.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG267.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题1： 启动canal报错，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Caused by: java.io.IOException: connect /127.0.0.1:3306 failure
	at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:85)
	at com.alibaba.otter.canal.parse.inbound.mysql.MysqlConnection.connect(MysqlConnection.java:89)
	at com.alibaba.otter.canal.parse.inbound.mysql.MysqlEventParser.preDump(MysqlEventParser.java:87)
	at com.alibaba.otter.canal.parse.inbound.AbstractEventParser$1.run(AbstractEventParser.java:176)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.io.IOException: caching_sha2_password Auth failed
	at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.negotiate(MysqlConnector.java:260)
	at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:82)
	... 4 more
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决1: 可能是权限问题，尝试下面的命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题2： Caused by: java.io.IOException: ErrorPacket [errorNumber=1146, fieldCount=-1, message=Table ‘XXX.BASE TABLE’ doesn’t exist, sqlState=42S02, sqlStateMarker=#]&lt;/p&gt;

&lt;p&gt;解决2： BASE TABLE这张表没找到？ 不知道为啥要去看这张表，事实上db中并没有这张表啊。深深怀疑是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;show full tables from `&quot; + schema + &quot;` where Table_type = 'BASE TABLE'&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这句query找出所有的table后的处理逻辑的bug. 这个我提了个&lt;a href=&quot;https://github.com/alibaba/canal/pull/4217&quot;&gt;PR&lt;/a&gt; . 版本1.1.6目前有这个问题.&lt;/p&gt;

</description>
				<pubDate>Thu, 09 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/canal</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/canal</guid>
			</item>
		
	</channel>
</rss>
