<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mouse的博客</title>
		<description>记录学习生活工作的点滴</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>canal RocketMQ</title>
				<description>&lt;h1 id=&quot;canal-导入rocketmq&quot;&gt;canal 导入RocketMQ&lt;/h1&gt;

&lt;p&gt;项目地址： &lt;a href=&quot;https://github.com/alibaba/canal/&quot;&gt;https://github.com/alibaba/canal/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2022/06/canal&quot;&gt;启动RocketMQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/2022/06/canal&quot;&gt;部署canal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改源码的canal.properties ，但是没生效&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG268.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这些实现类是用SPI加载的&lt;/p&gt;

&lt;p&gt;CanalLauncher.java -》 CanalStarter.java&lt;/p&gt;

&lt;p&gt;追进去看到 classLoader 会去 target/plugin 文件夹中读取class。找不到再走META-INF/canal/xxx.CanalMQProducuer&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG269.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把如下注释掉就行了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG270.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在canal源码中的配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#这个不用动
canal.destinations = example
#这个是mq的主题，这个保证和下图的主题一致即可
canal.mq.topic=test-topic

#模式从 tcp 改成 rocketMQ
canal.serverMode = rocketMQ

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在消费端的rocketMQ的配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876
spring.cloud.stream.bindings.input1.destination=test-topic
spring.cloud.stream.bindings.input1.content-type=application/json
spring.cloud.stream.bindings.input1.group=group
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功！&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2022-06-11 10:11:29.366  INFO 2493 --- [MessageThread_1] com.mouse.canal_test.rocketmq.Consumer   : payload={&quot;data&quot;:[{&quot;id&quot;:&quot;5&quot;,&quot;count&quot;:&quot;13&quot;}],&quot;database&quot;:&quot;store_db&quot;,&quot;es&quot;:1654874446000,&quot;id&quot;:1,&quot;isDdl&quot;:false,&quot;mysqlType&quot;:{&quot;id&quot;:&quot;int&quot;,&quot;count&quot;:&quot;int&quot;},&quot;old&quot;:[{&quot;count&quot;:&quot;313&quot;}],&quot;pkNames&quot;:[&quot;id&quot;],&quot;sql&quot;:&quot;&quot;,&quot;sqlType&quot;:{&quot;id&quot;:4,&quot;count&quot;:4},&quot;table&quot;:&quot;store&quot;,&quot;ts&quot;:1654911313692,&quot;type&quot;:&quot;UPDATE&quot;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Thu, 09 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/canal-RocketMQ</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/canal-RocketMQ</guid>
			</item>
		
			<item>
				<title>canal</title>
				<description>&lt;h1 id=&quot;canal&quot;&gt;canal&lt;/h1&gt;

&lt;p&gt;项目地址： &lt;a href=&quot;https://github.com/alibaba/canal/&quot;&gt;https://github.com/alibaba/canal/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;前提&quot;&gt;前提&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/2022/03/mysql-docker&quot;&gt;docker部署MySQL&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开启binlog 写入&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;修改my.cnf 。一般路径在/etc/mysql/my.cnf&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; [mysqld]
 log-bin=mysql-bin # 开启 binlog
 binlog-format=ROW # 选择 ROW 模式
 server_id=1 # 配置 MySQL replaction 需要定义，不要和 canal 的 slaveId 重复
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建canal账号&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  CREATE USER canal IDENTIFIED BY 'canal';  
  GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';
  -- GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;
  FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;启动canal&quot;&gt;启动canal&lt;/h3&gt;

&lt;p&gt;因为Mysql是docker启动的，如果canal也是docker启动，可能会需要搭建网桥。所以这里我们直接在宿主机上直接启动canal. &lt;a href=&quot;https://github.com/alibaba/canal/wiki/QuickStart&quot;&gt;QuickStart&lt;/a&gt; 这里介绍的很清楚&lt;/p&gt;

&lt;p&gt;注意观察 bin/startup.sh脚本中的配置文件路径，默认是 canal.properties&lt;/p&gt;

&lt;p&gt;目前1.1.6有点问题，见下面的问题2&lt;/p&gt;

&lt;p&gt;我是clone代码 &lt;a href=&quot;https://github.com/alibaba/canal&quot;&gt;https://github.com/alibaba/canal&lt;/a&gt; 之后稍微改了下， 在IDEA中手动启动java进程.&lt;/p&gt;

&lt;h3 id=&quot;测试代码仓库&quot;&gt;测试代码仓库&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gongchangyou/canal_test&quot;&gt;https://github.com/gongchangyou/canal_test&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;效果&quot;&gt;效果&lt;/h3&gt;

&lt;p&gt;在某张表更新了一行记录，可以从canal的客户端中获取变更。&lt;/p&gt;

&lt;p&gt;客户端解析protobuf格式的ByteString.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG266.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG267.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题1： 启动canal报错，&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Caused by: java.io.IOException: connect /127.0.0.1:3306 failure
	at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:85)
	at com.alibaba.otter.canal.parse.inbound.mysql.MysqlConnection.connect(MysqlConnection.java:89)
	at com.alibaba.otter.canal.parse.inbound.mysql.MysqlEventParser.preDump(MysqlEventParser.java:87)
	at com.alibaba.otter.canal.parse.inbound.AbstractEventParser$1.run(AbstractEventParser.java:176)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.io.IOException: caching_sha2_password Auth failed
	at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.negotiate(MysqlConnector.java:260)
	at com.alibaba.otter.canal.parse.driver.mysql.MysqlConnector.connect(MysqlConnector.java:82)
	... 4 more
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决1: 可能是权限问题，尝试下面的命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GRANT ALL PRIVILEGES ON *.* TO 'canal'@'%' ;
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题2： Caused by: java.io.IOException: ErrorPacket [errorNumber=1146, fieldCount=-1, message=Table ‘XXX.BASE TABLE’ doesn’t exist, sqlState=42S02, sqlStateMarker=#]&lt;/p&gt;

&lt;p&gt;解决2： BASE TABLE这张表没找到？ 不知道为啥要去看这张表，事实上db中并没有这张表啊。深深怀疑是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;show full tables from `&quot; + schema + &quot;` where Table_type = 'BASE TABLE'&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这句query找出所有的table后的处理逻辑的bug. 这个我提了个&lt;a href=&quot;https://github.com/alibaba/canal/pull/4217&quot;&gt;PR&lt;/a&gt; . 版本1.1.6目前有这个问题.&lt;/p&gt;

</description>
				<pubDate>Thu, 09 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/canal</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/canal</guid>
			</item>
		
			<item>
				<title>seata</title>
				<description>&lt;h1 id=&quot;seata-分布式事务&quot;&gt;SEATA 分布式事务&lt;/h1&gt;

&lt;p&gt;官网： &lt;a href=&quot;https://seata.io/zh-cn/docs/overview/what-is-seata.html&quot;&gt;https://seata.io/zh-cn/docs/overview/what-is-seata.html&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;跨服务调用场景下的事务传播，本质上就是要把 XID 通过服务调用传递到服务提供方，并绑定到 RootContext 中去。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;术语&quot;&gt;术语&lt;/h3&gt;
&lt;p&gt;TC (Transaction Coordinator) - 事务协调者
维护全局和分支事务的状态，驱动全局事务提交或回滚。&lt;/p&gt;

&lt;p&gt;TM (Transaction Manager) - 事务管理器
定义全局事务的范围：开始全局事务、提交或回滚全局事务。&lt;/p&gt;

&lt;p&gt;RM (Resource Manager) - 资源管理器
管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;at的实现方案&quot;&gt;AT的实现方案&lt;/h2&gt;

&lt;p&gt;参考文章 &lt;a href=&quot;https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html&quot;&gt;https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://seata.io/zh-cn/docs/user/quickstart.html&quot;&gt;https://seata.io/zh-cn/docs/user/quickstart.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;前提&quot;&gt;前提&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;基于支持本地 ACID 事务的关系型数据库。&lt;/p&gt;

  &lt;p&gt;Java 应用，通过 JDBC 访问数据库。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面是一个具体的例子：订单扣库存的解决方案&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/solution.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体的操作步骤有3步：&lt;/p&gt;

&lt;p&gt;前提： &lt;a href=&quot;../../../2022/01/nacos&quot;&gt; 我们先本地启动一个nacos &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一. 启动seata&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;下载 1.4.2版本，更高版本不知道配置在哪里，&lt;a href=&quot;https://github.com/seata/seata/releases/tag/v1.4.2&quot;&gt;https://github.com/seata/seata/releases/tag/v1.4.2&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;解压后，去修改 conf/registry.conf 和conf/file.conf 中关于db的配置
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    registry {
              \# file 、nacos 、eureka、redis、zk、consul、etcd3、sofa
              type = &quot;nacos&quot;
       

              nacos {
                application = &quot;seata-server&quot;
                serverAddr = &quot;127.0.0.1:8848&quot;
                group = &quot;SEATA_GROUP&quot;
                namespace = &quot;&quot;
                cluster = &quot;default&quot;
                username = &quot;nacos&quot;
                password = &quot;nacos&quot;
              }
          }
          config {
              \# file、nacos 、apollo、zk、consul、etcd3
              type = &quot;nacos&quot;

              nacos {
                serverAddr = &quot;127.0.0.1:8848&quot;
                namespace = &quot;&quot;
                group = &quot;SEATA_GROUP&quot;
                username = &quot;nacos&quot;
                password = &quot;nacos&quot;
                dataId = &quot;seataServer.properties&quot;
              }
          }
                  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; db {
## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.
datasource = &quot;druid&quot;
## mysql/oracle/postgresql/h2/oceanbase etc.
dbType = &quot;mysql&quot;
driverClassName = &quot;com.mysql.jdbc.Driver&quot;
## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param
url = &quot;jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&quot;
user = &quot;root&quot;
password = &quot;123456&quot;
minConn = 5
maxConn = 100
globalTable = &quot;global_table&quot;
branchTable = &quot;branch_table&quot;
lockTable = &quot;lock_table&quot;
queryLimit = 100
maxWait = 5000
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;cd bin&lt;/p&gt;

      &lt;p&gt;sh seata-server.sh -p 8091 -m file&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG259.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;二. 在DB中创建一些表例如undo log 来维护事务xid ，branchid （子事务） 的状态和回滚。 每个微服务的db中都要建这个表，因为各自的undo log存在各自的db的undo_log表中&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE `undo_log`
(
  `id`            BIGINT(20)   NOT NULL AUTO_INCREMENT,
  `branch_id`     BIGINT(20)   NOT NULL,
  `xid`           VARCHAR(100) NOT NULL,
  `context`       VARCHAR(128) NOT NULL,
  `rollback_info` LONGBLOB     NOT NULL,
  `log_status`    INT(11)      NOT NULL,
  `log_created`   DATETIME     NOT NULL,
  `log_modified`  DATETIME     NOT NULL,
  `ext`           VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)
) ENGINE = InnoDB
  AUTO_INCREMENT = 1
  DEFAULT CHARSET = utf8;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;三. 搭建微服务&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先把nacos 启动起来 &lt;a href=&quot;../../../2022/01/nacos&quot;&gt;启动nacos&lt;/a&gt; (这步第0步已经做过了)&lt;/li&gt;
  &lt;li&gt;启动 maven仓库   &lt;a href=&quot;../../../2022/01/maven&quot;&gt;启动maven仓库&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;注册两个service， 新增一个consumer , 注意 dubbo.application.parameters.group 需要配置成相同的。 代码仓库如下
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://github.com/gongchangyou/service-order&quot;&gt;https://github.com/gongchangyou/service-order&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://github.com/gongchangyou/service-store&quot;&gt;https://github.com/gongchangyou/service-store&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://github.com/gongchangyou/service-buy&quot;&gt;https://github.com/gongchangyou/service-buy&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;注意各微服务中关于seata的配置&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #seata nacos配置
 seata.registry.type=nacos
 #这个配置需要跟nacos中的服务名保持一致
 seata.registry.nacos.group=SEATA_GROUP
 seata.registry.nacos.application=seata-server
 #seata.registry.nacos.namespace=${nacos.discovery.namespace}
 seata.registry.nacos.cluster=default
 seata.registry.nacos.server-addr=127.0.0.1:8848
 #账号密码
 #seata.registry.nacos.username=nacos
 #seata.registry.nacos.password=nacos
 seata.tx-service-group=my_test_tx_group
 seata.enabled=true
 #seata 配置
 seata.enable-auto-data-source-proxy=true
 seata.application-id=${spring.application.name}
 seata.config.type=nacos
 seata.config.nacos.group=SEATA_GROUP
 seata.config.nacos.server-addr=127.0.0.1:8848
 #seata.config.nacos.namespace=${nacos.discovery.namespace}
 #seata.config.nacos.username=nacos
 #seata.config.nacos.password=nacos
 #可以切换AT和XA
 seata.data-source-proxy-mode=AT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;问题1: io.seata.core.rpc.netty.NettyClientChannelManager : can not get cluster name in registry config ‘service.vgroupMapping.my_test_tx_group’, please make sure registry config correct&lt;/p&gt;

&lt;p&gt;解决1: 从ClientWorker.getServerConfig方法追进去看 http的url，发现是设置了tenant和 accessToken.注意检查下你的nacos的api是否需要携带这俩参数，如果没必要的话，记得在代码中把 username,password, namespace注释掉&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;访问试试

http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=service.vgroupMapping.my_test_tx_group&amp;amp;group=SEATA_GROUP&amp;amp;tenant=c7ba173f-29e5-4c58-ae78-b102be11c4f9&amp;amp;accessToken=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTY1NDc2NTk5N30.Di3xRbagvMl_OCq5lnQFP7wOWN8dupuQX3QXr24DITU

http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=service.vgroupMapping.my_test_tx_group&amp;amp;group=SEATA_GROUP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题2：io.seata.core.rpc.netty.NettyClientChannelManager : no available service found in cluster ‘seata-server’, please make sure registry config correct and keep your seata server running&lt;/p&gt;

&lt;p&gt;解决2：在配置中心设置seata-server 的默认集群(cluster) , 直接写default就行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG262.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题3: 2022-06-09 14:40:05.340 ERROR [timeoutChecker_2_1] io.seata.core.rpc.netty.NettyClientChannelManager : 0101 can not connect to 192.168.1.4:8091 cause:can not register RM,err:register RMROLE error, errMsg:cost 30004 ms&lt;/p&gt;

&lt;p&gt;解决3： 注册不上RM, 检查了一下seata的 conf/file.conf中 db的配置,  确保username和password都填写正确&lt;/p&gt;

&lt;p&gt;问题4： 2022-06-09 14:56:29.679 ERROR [restartedMain] io.seata.core.rpc.netty.NettyClientChannelManager : 0304 register RM failed.&lt;/p&gt;

&lt;p&gt;解决4： 同3&lt;/p&gt;

&lt;p&gt;问题5：java.lang.NoSuchMethodException: com.mysql.cj.conf.PropertySet.getBooleanReadableProperty(java.lang.String)&lt;/p&gt;

&lt;p&gt;method_6_getPropertySet = class_6_connection.getMethod(“getBooleanReadableProperty”);   JdbcConnection中找不到 getBooleanReadableProperty方法&lt;/p&gt;

&lt;p&gt;解决5：是druid中的MysqlUtils 类的bug. 在1.2.5以后修复了. 升级即可，但是spring-boot可能会无法自动加载DruidDataSourceWrapper. exclude掉即可 @SpringBootApplication(scanBasePackages = {“com.mouse”}, exclude = DruidDataSourceAutoConfigure.class)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.5&amp;lt;/version&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;spring-boot-autoconfigure&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;undo-log中的记录-例子-如果想要看undolog的话记得在事务中添加断点因为事务执行完毕会清空undo_log表&quot;&gt;undo log中的记录 例子, 如果想要看undolog的话记得在事务中添加断点，因为事务执行完毕会清空undo_log表.&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10,7034894280102293554,192.168.1.3:8091:7034894280102293553,serializer=jackson,&quot;{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.undo.BranchUndoLog&quot;&quot;,&quot;&quot;xid&quot;&quot;:&quot;&quot;192.168.1.3:8091:7034894280102293553&quot;&quot;,&quot;&quot;branchId&quot;&quot;:7034894280102293554,&quot;&quot;sqlUndoLogs&quot;&quot;:[&quot;&quot;java.util.ArrayList&quot;&quot;,[{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.undo.SQLUndoLog&quot;&quot;,&quot;&quot;sqlType&quot;&quot;:&quot;&quot;INSERT&quot;&quot;,&quot;&quot;tableName&quot;&quot;:&quot;&quot;`order`&quot;&quot;,&quot;&quot;beforeImage&quot;&quot;:{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.TableRecords$EmptyTableRecords&quot;&quot;,&quot;&quot;tableName&quot;&quot;:&quot;&quot;order&quot;&quot;,&quot;&quot;rows&quot;&quot;:[&quot;&quot;java.util.ArrayList&quot;&quot;,[]]},&quot;&quot;afterImage&quot;&quot;:{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.TableRecords&quot;&quot;,&quot;&quot;tableName&quot;&quot;:&quot;&quot;order&quot;&quot;,&quot;&quot;rows&quot;&quot;:[&quot;&quot;java.util.ArrayList&quot;&quot;,[{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.Row&quot;&quot;,&quot;&quot;fields&quot;&quot;:[&quot;&quot;java.util.ArrayList&quot;&quot;,[{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.Field&quot;&quot;,&quot;&quot;name&quot;&quot;:&quot;&quot;id&quot;&quot;,&quot;&quot;keyType&quot;&quot;:&quot;&quot;PRIMARY_KEY&quot;&quot;,&quot;&quot;type&quot;&quot;:4,&quot;&quot;value&quot;&quot;:28},{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.Field&quot;&quot;,&quot;&quot;name&quot;&quot;:&quot;&quot;status&quot;&quot;,&quot;&quot;keyType&quot;&quot;:&quot;&quot;NULL&quot;&quot;,&quot;&quot;type&quot;&quot;:4,&quot;&quot;value&quot;&quot;:0}]]}]]}}]]}&quot;,0,2022-06-09 12:54:35,2022-06-09 12:54:35,


11,7034894280102293555,192.168.1.3:8091:7034894280102293553,serializer=jackson,&quot;{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.undo.BranchUndoLog&quot;&quot;,&quot;&quot;xid&quot;&quot;:&quot;&quot;192.168.1.3:8091:7034894280102293553&quot;&quot;,&quot;&quot;branchId&quot;&quot;:7034894280102293555,&quot;&quot;sqlUndoLogs&quot;&quot;:[&quot;&quot;java.util.ArrayList&quot;&quot;,[{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.undo.SQLUndoLog&quot;&quot;,&quot;&quot;sqlType&quot;&quot;:&quot;&quot;UPDATE&quot;&quot;,&quot;&quot;tableName&quot;&quot;:&quot;&quot;store&quot;&quot;,&quot;&quot;beforeImage&quot;&quot;:{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.TableRecords&quot;&quot;,&quot;&quot;tableName&quot;&quot;:&quot;&quot;store&quot;&quot;,&quot;&quot;rows&quot;&quot;:[&quot;&quot;java.util.ArrayList&quot;&quot;,[{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.Row&quot;&quot;,&quot;&quot;fields&quot;&quot;:[&quot;&quot;java.util.ArrayList&quot;&quot;,[{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.Field&quot;&quot;,&quot;&quot;name&quot;&quot;:&quot;&quot;id&quot;&quot;,&quot;&quot;keyType&quot;&quot;:&quot;&quot;PRIMARY_KEY&quot;&quot;,&quot;&quot;type&quot;&quot;:4,&quot;&quot;value&quot;&quot;:1},{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.Field&quot;&quot;,&quot;&quot;name&quot;&quot;:&quot;&quot;count&quot;&quot;,&quot;&quot;keyType&quot;&quot;:&quot;&quot;NULL&quot;&quot;,&quot;&quot;type&quot;&quot;:4,&quot;&quot;value&quot;&quot;:910}]]}]]},&quot;&quot;afterImage&quot;&quot;:{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.TableRecords&quot;&quot;,&quot;&quot;tableName&quot;&quot;:&quot;&quot;store&quot;&quot;,&quot;&quot;rows&quot;&quot;:[&quot;&quot;java.util.ArrayList&quot;&quot;,[{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.Row&quot;&quot;,&quot;&quot;fields&quot;&quot;:[&quot;&quot;java.util.ArrayList&quot;&quot;,[{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.Field&quot;&quot;,&quot;&quot;name&quot;&quot;:&quot;&quot;id&quot;&quot;,&quot;&quot;keyType&quot;&quot;:&quot;&quot;PRIMARY_KEY&quot;&quot;,&quot;&quot;type&quot;&quot;:4,&quot;&quot;value&quot;&quot;:1},{&quot;&quot;@class&quot;&quot;:&quot;&quot;io.seata.rm.datasource.sql.struct.Field&quot;&quot;,&quot;&quot;name&quot;&quot;:&quot;&quot;count&quot;&quot;,&quot;&quot;keyType&quot;&quot;:&quot;&quot;NULL&quot;&quot;,&quot;&quot;type&quot;&quot;:4,&quot;&quot;value&quot;&quot;:907}]]}]]}}]]}&quot;,0,2022-06-09 12:55:56,2022-06-09 12:55:56,

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;注意点&quot;&gt;注意点&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;各个服务的group要一致，不然无法实例化. 一家公司的group最好统一吧，不然TM无法调用RM.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dubbo.application.parameters.group=test-service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG265.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 08 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/seata</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/seata</guid>
			</item>
		
			<item>
				<title>RocketMQ source code</title>
				<description>&lt;h1 id=&quot;rocketmq-源码解析&quot;&gt;RocketMQ 源码解析&lt;/h1&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://juejin.cn/post/6847902221577748487&quot;&gt;https://juejin.cn/post/6847902221577748487&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码仓库： &lt;a href=&quot;https://github.com/gongchangyou/dubbo-demo-producer&quot;&gt;https://github.com/gongchangyou/dubbo-demo-producer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gongchangyou/dubbo-demo-consumer&quot;&gt;https://github.com/gongchangyou/dubbo-demo-consumer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里借用了dubbo的demo， 所以可能需要启动nacos.&lt;/p&gt;

&lt;h3 id=&quot;netty基础知识&quot;&gt;netty基础知识:&lt;/h3&gt;
&lt;p&gt;RocketMQ是的TCP通信基于 netty的
初始化时, NettyRemotingClient.start 中， 实例化一个bootstrap, 设置一个 ChannelHandler，这个handler给pipeline注册一堆 ChannelHandler，比如 SimpleChannelInboundHandler， 可以read channel中的报文。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG256.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;生产端-producer&quot;&gt;生产端 producer&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/202206/producer_uml.drawio.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;消费端-consumer&quot;&gt;消费端 consumer&lt;/h3&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://blog.csdn.net/weixin_34452850/article/details/82712634&quot;&gt;https://blog.csdn.net/weixin_34452850/article/details/82712634&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;长轮询上面这篇文章介绍过了，具体方法就是 DefaultMQPushConsumerImpl.executePullRequestLater&lt;/p&gt;

&lt;font color=&quot;red&quot;&gt;管理类是 MQClientInstance，一个主题对应一个，里面有很多成员，管理主题路由信息（topicRouteTable），消费者(consumerTable) 等 &lt;/font&gt;

&lt;p&gt;consumer的设计简直回调地狱.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202206/consumer_uml.drawio.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt; 
&lt;img src=&quot;/images/202206/consumer_receive_uml.drawio.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;consumer是利用 PullMessageService 中的 LinkedBlockingQueue&lt;PullRequest&gt; pullRequestQueue 来获取消息. 因为producer的这个 pullRequestQueue 不会put元素进去，所以会阻塞在这个take方法，也不会有啥影响，顶多就是占用一个空的queue对象.&lt;/PullRequest&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/202206/WechatIMG257.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这个 schedule task 里面启动了很多轮询任务，包括更新主题路由信息(根据topic 获取addr)，清理掉线的broker，上报offset给broker，心跳检测。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.startScheduledTask();

private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {
        @Override
        public Thread newThread(Runnable r) {
            return new Thread(r, &quot;MQClientFactoryScheduledThread&quot;);
        }
    });
scheduledThreadPoolExecutor.scheduleAtFixedRate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;核心组件-broker&quot;&gt;核心组件 broker&lt;/h3&gt;
&lt;p&gt;这个我说不好，暂时没时间看源码了，参考文章:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844904191916245000&quot;&gt;https://juejin.cn/post/6844904191916245000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1645897&quot;&gt;https://cloud.tencent.com/developer/article/1645897&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/427602828&quot;&gt;https://zhuanlan.zhihu.com/p/427602828&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gsmtoday.github.io/2018/03/26/rocketmq-broker/&quot;&gt;https://gsmtoday.github.io/2018/03/26/rocketmq-broker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kgyhkgyh.gitbooks.io/rocketmq/content/chapter2.html&quot;&gt;https://kgyhkgyh.gitbooks.io/rocketmq/content/chapter2.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.modb.pro/db/72476&quot;&gt;https://www.modb.pro/db/72476&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;问题1：超时是如何实现的？&lt;/p&gt;

&lt;p&gt;回答1:  NettyRemotingAbstract 中 ,  responseFuture的 responseCommand 初始化的时候就是null， 如果发送成功 但是迟迟没有收到response 就会抛timeout异常。这里的实现是基于countDownLatch. 如果是我的话可能会用个 completableFuture.orTimeout, 或者get(2, TimeUnit.SECONDS)  .示例代码:
&lt;a href=&quot;https://github.com/gongchangyou/transactional/blob/master/src/test/java/com/mouse/transactional/FutureTest.java#L46&quot;&gt;https://github.com/gongchangyou/transactional/blob/master/src/test/java/com/mouse/transactional/FutureTest.java#L46&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;当然  responseFuture.isSendRequestOK() 这个判断还是需要的，用来区分是否发送成功。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RemotingCommand responseCommand = responseFuture.waitResponse(timeoutMillis);
            if (null == responseCommand) { //netty迟迟没有receive 消息，这里就是null
                if (responseFuture.isSendRequestOK()) { //但是request已经发送成功了
                    throw new RemotingTimeoutException(RemotingHelper.parseSocketAddressAddr(addr), timeoutMillis,
                        responseFuture.getCause());
                } else {
                    throw new RemotingSendRequestException(RemotingHelper.parseSocketAddressAddr(addr), responseFuture.getCause());
                }
            }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题2:  多个consumer的offset是如何管理的？
回答2： 参考文章 &lt;a href=&quot;https://www.jianshu.com/p/4929947c0b31&quot;&gt;https://www.jianshu.com/p/4929947c0b31&lt;/a&gt;  因为broker的代码我还没看过哈，猜测一个可能的处理方式，A,B 两个consumer. nextOffset分别是34，35， 当各自消费完之后，A，B各自去pull 34，35。因为34消息已经被B消费掉了， 所以A可能就pull了个寂寞，pullResult.getPullStatus() 是 NO_NEW_MSG， 此时会将本地 nextOffset置位 35.&lt;/p&gt;

&lt;p&gt;问题3： broker是如何处理某个offset上的消息一直没消费成功的?
回答3:    没有时间看源码，结合一些文章看大概是，consumer本地重试 + sendBack， 将异常的消息重新发送一次，这样offset往前走也没问题。&lt;/p&gt;
</description>
				<pubDate>Thu, 02 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/RocketMQ-source-code</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/RocketMQ-source-code</guid>
			</item>
		
			<item>
				<title>mmap</title>
				<description>&lt;h1 id=&quot;零拷贝技术-mmap&quot;&gt;零拷贝技术 mmap&lt;/h1&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://www.jianshu.com/p/f90866dcbffc&quot;&gt;https://www.jianshu.com/p/f90866dcbffc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7016498891365302302&quot;&gt;https://juejin.cn/post/7016498891365302302&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码仓库: &lt;a href=&quot;https://github.com/gongchangyou/mmap&quot;&gt;https://github.com/gongchangyou/mmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;常用方法&lt;/p&gt;

&lt;p&gt;force : 强制刷盘&lt;/p&gt;

&lt;p&gt;slice: 创建一个新的字节缓冲区,其内容是该缓冲区内容的共享子序列&lt;/p&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Slf4j
@SpringBootTest
class MmapApplicationTests {

    String str = &quot;mouse 中文&quot;;

    int size = str.getBytes().length;

    @Test
    public void writeWithMap() throws IOException {
        try (RandomAccessFile file = new RandomAccessFile(new File(&quot;src/main/resources/big.www.flydean.com&quot;), &quot;rw&quot;))
        {
            //get Channel
            FileChannel fileChannel = file.getChannel();
            //get mappedByteBuffer from fileChannel
            MappedByteBuffer buffer = fileChannel.map(FileChannel.MapMode.READ_WRITE, 0, 1024 );
            // check buffer
            log.info(&quot;is Loaded in physical memory: {}&quot;,buffer.isLoaded());
            log.info(&quot;capacity {}&quot;,buffer.capacity());
            //write the content
            buffer.put(str.getBytes());
        }
    }

    @Test
    public void readWithMap() throws IOException {
        try (RandomAccessFile file = new RandomAccessFile(new File(&quot;src/main/resources/big.www.flydean.com&quot;), &quot;r&quot;))
        {
            //get Channel
            FileChannel fileChannel = file.getChannel();
            //get mappedByteBuffer from fileChannel
            MappedByteBuffer buffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileChannel.size());
            // check buffer
            log.info(&quot;is Loaded in physical memory: {}&quot;,buffer.isLoaded());
            log.info(&quot;capacity {}&quot;,buffer.capacity());
            byte[] bytes = new byte[size];

            //read the buffer
            for (int i = 0; i &amp;lt; bytes.length; i++)
            {
                bytes[i] = buffer.get();
//                log.info(&quot;get {}&quot;, buffer.get());
            }

            val str = new String(bytes);
            log.info(&quot;str= {}&quot;, str);
        }
    }


}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 01 Jun 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/06/MappedByteBuffer</link>
				<guid isPermaLink="true">http://localhost:4000/2022/06/MappedByteBuffer</guid>
			</item>
		
			<item>
				<title>dubbo</title>
				<description>&lt;h1 id=&quot;dubbo-源码解析&quot;&gt;Dubbo 源码解析&lt;/h1&gt;

&lt;h3 id=&quot;bean加载实例化&quot;&gt;bean加载，实例化&lt;/h3&gt;

&lt;p&gt;参考文章 &lt;a href=&quot;https://blog.csdn.net/leisurelen/article/details/107078066&quot;&gt;https://blog.csdn.net/leisurelen/article/details/107078066&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;示例代码仓库: &lt;a href=&quot;https://github.com/gongchangyou/bean&quot;&gt;https://github.com/gongchangyou/bean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BeanPostProcessor 的具体实现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Slf4j
public class AbstractAnnotationBeanPostProcessor implements BeanDefinitionRegistryPostProcessor, SmartInstantiationAwareBeanPostProcessor {
    public static final String BEAN_NAME = &quot;abstractAnnotationBeanPostProcessor&quot;;
    @Override
    @Nullable
    public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName)
            throws BeansException {
        final List&amp;lt;Object&amp;gt; elements = new LinkedList&amp;lt;&amp;gt;();
        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {
            @Override
            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {
                if (field.getAnnotation(Dubbo.class)!=null) {
                    elements.add(field);
                    //可以在这里做一些根据初始化field的 操作
                    field.setAccessible(true);
                    field.set(bean, 3L);
                }
            }
        });
        log.info(&quot;beanName={} list={}&quot;,beanName,elements);
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将BeanPostProcessor注册到 BeanDefinition中:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG248.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;只需要在application上添加 @Import 注解即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG249.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;客户端调用&quot;&gt;客户端调用&lt;/h3&gt;

&lt;p&gt;自己整理了下客户端调用流程: &lt;a href=&quot;/images/202205/dubbo client.drawio&quot;&gt;dubbo client.drawio&lt;/a&gt;
&lt;img src=&quot;/images/202205/dubbo_client.drawio.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题1： 当服务端切换ip时（比如蓝绿升级），客户端 invokers（里面有ip/port）是如何更新的？&lt;/p&gt;

&lt;p&gt;回答1: org.apache.dubbo.registry.nacos.NacosRegistry 会订阅nacos事件,每5分钟poll一次. 当nacos EventDispatcher中的listener.onEvent 触发时，会去变更RouterChain中的 invokers.
&lt;img src=&quot;/images/202205/WechatIMG246.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG247.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;服务端bean加载&quot;&gt;服务端bean加载&lt;/h3&gt;

&lt;p&gt;具体实现的 BeanDefinitionRegistryPostProcessor 是 ServiceClassPostProcessor. 他扫描packagesToScan 中类，解析DubboService 注解。&lt;/p&gt;

&lt;p&gt;那么他是何时被注册的呢？ 跟客户端bean加载一样，@Import (DubboComponentScanRegistrar.class)  .&lt;/p&gt;

&lt;p&gt;DubboComponentScanRegistrar中会注册 ServiceClassPostProcessor的子类 ServiceAnnotationBeanPostProcessor（已经不推荐使用了）&lt;/p&gt;

&lt;h3 id=&quot;服务端逻辑&quot;&gt;服务端逻辑&lt;/h3&gt;

&lt;p&gt;流程图: 
&lt;a href=&quot;/images/202205/dubbo_server.drawio&quot;&gt;dubbo_server.drawio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/dubbo_server.drawio.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题1：二进制字节流 如何解析 serviceName methodName parameters ?&lt;/p&gt;

&lt;p&gt;回答1：DecodeHandler 将 inputStream中的 buffer 转换成targetServiceUniqueName, methodName, arguments等
具体逻辑在 DecodeableRpcInvocation.decode(Channel channel, InputStream input) 中，应该就是dubbo协议的解析 其中in这个临时变量是根据channel中的serializationType 中确定的，这个也是SPI加载的， 默认是Hessian2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG253.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题2： dubbo在收到报文后，如何给到对应的proxy去执行方法？&lt;/p&gt;

&lt;p&gt;回答2:   DubboProtocol， 方法 getInvoker , 根据serviceKey(形如 dubbo-demo/com.braindata.dubbodemo.intf.StuRpcService:1.0.0:62604)  ，去exporterMap 获取对应的value，就是invoker了
&lt;img src=&quot;/images/202205/WechatIMG254.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题3： Filter是如何添加进Wrapper的？&lt;/p&gt;

&lt;p&gt;回答3:    ProtocolFilterWrapper 类      List&lt;Filter&gt; filters = ExtensionLoader.getExtensionLoader(Filter.class).getActivateExtension(invoker.getUrl(), key, group);&lt;/Filter&gt;&lt;/p&gt;

</description>
				<pubDate>Mon, 30 May 2022 09:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/Dubbo-source-code</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/Dubbo-source-code</guid>
			</item>
		
			<item>
				<title>CompletableFuture</title>
				<description>&lt;h1 id=&quot;completablefuture&quot;&gt;CompletableFuture&lt;/h1&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://juejin.cn/post/6844903594165026829&quot;&gt;https://juejin.cn/post/6844903594165026829&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://colobu.com/2016/02/29/Java-CompletableFuture/&quot;&gt;https://colobu.com/2016/02/29/Java-CompletableFuture/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一个手动complete的例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    @Test
    void complete() {
        CompletableFuture cf = new CompletableFuture&amp;lt;String&amp;gt;();

        val cf1 = cf.thenApply((Object str) -&amp;gt; {
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return ((String)str).replace(&quot;a&quot;, &quot;d&quot;);
        });

        cf.complete(&quot;aad&quot;); //这里会触发cf后面的thenApply方法，上述的sleep会同步阻塞。

        try {
            val value = cf.get();
            val value1 = cf1.get(Integer.MAX_VALUE, TimeUnit.MILLISECONDS);
            log.info(&quot;value={} value1={}&quot;,value,value1);
        } catch (InterruptedException | ExecutionException | TimeoutException e) {
            e.printStackTrace();
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;超时设置&quot;&gt;超时设置&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;orTimeout 方法， 超时会抛出TimeOut异常&lt;/li&gt;
  &lt;li&gt;completeOnTimeout 超时会被设置成默认值&lt;/li&gt;
  &lt;li&gt;get(long timeout, TimeUnit unit)， 同1&lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Sun, 29 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/CompletableFuture</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/CompletableFuture</guid>
			</item>
		
			<item>
				<title>antrun</title>
				<description>&lt;h1 id=&quot;maven-antrun-plugin&quot;&gt;maven antrun plugin&lt;/h1&gt;

&lt;p&gt;有时候我们希望打包的时候添加一些行为，比如把文件从resource 文件夹下拷贝到另外一个地方.&lt;/p&gt;

&lt;p&gt;这时候就可以使用 maven antrun plugin.&lt;/p&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://maven.apache.org/plugins/maven-antrun-plugin/usage.html&quot;&gt;https://maven.apache.org/plugins/maven-antrun-plugin/usage.html&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;project&amp;gt;
  [...]
  &amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;artifactId&amp;gt;maven-antrun-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.8&amp;lt;/version&amp;gt;
        &amp;lt;executions&amp;gt;
          &amp;lt;execution&amp;gt;
            &amp;lt;phase&amp;gt; &amp;lt;!-- Maven的生命周期阶段 --&amp;gt; &amp;lt;/phase&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;target&amp;gt;

                &amp;lt;!--
                  将任务Ant任务放在这里，还可以在这里添加一个build.xml文件
                --&amp;gt;

              &amp;lt;/target&amp;gt;
            &amp;lt;/configuration&amp;gt;
            &amp;lt;goals&amp;gt;
              &amp;lt;goal&amp;gt;run&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
          &amp;lt;/execution&amp;gt;
        &amp;lt;/executions&amp;gt;
      &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
  &amp;lt;/build&amp;gt;
  [...]
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码仓库:   &lt;a href=&quot;https://github.com/gongchangyou/transactional&quot;&gt;https://github.com/gongchangyou/transactional&lt;/a&gt; 这里借用下transactional仓库演示一下&lt;/p&gt;

&lt;p&gt;直接打包， 就可以看到具体的target任务已经执行了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn package -Dmaven.test.skip=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sat, 28 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/maven-antrun-plugin</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/maven-antrun-plugin</guid>
			</item>
		
			<item>
				<title>idea</title>
				<description>&lt;h1 id=&quot;idea-in-windows&quot;&gt;Idea in windows&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;去官网下载  &lt;a href=&quot;https://www.jetbrains.com/zh-cn/idea/&quot;&gt;https://www.jetbrains.com/zh-cn/idea/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;插件安装 ：&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugins&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;去 file -&amp;gt; settings 搜索maven 看看 maven的settings.xml 在哪里，备份下，然后把阿里云的源添加进去     &lt;a href=&quot;/images/202205/settings-personal.xml&quot;&gt;settings-personal.xml&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改idea内存&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/202205/idea_vm_options.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;下面这段我不知道从哪儿抄来的，其中最有用的就是 设置内存     -Xmx4096m&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# custom IntelliJ IDEA VM options
    
-Xms128m
-Xmx4096m
-XX:ReservedCodeCacheSize=240m
-XX:+UseCompressedOops
-Dfile.encoding=UTF-8
-XX:+UseConcMarkSweepGC
-XX:SoftRefLRUPolicyMSPerMB=50
-ea
-XX:CICompilerCount=2
-Dsun.io.useCanonCaches=false
-Djava.net.preferIPv4Stack=true
-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;
-XX:+HeapDumpOnOutOfMemoryError
-XX:-OmitStackTraceInFastThrow
    
-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log
-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显示idea使用内存情况  右下角右键 选中 memory indicator (内存指示器)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更改主题 ：   &lt;a href=&quot;/images/202205/dark_theme.icls&quot;&gt;dark_theme.icls&lt;/a&gt;  个人比较喜欢这款糖果配色
file-&amp;gt; settings -&amp;gt; 搜索color scheme -&amp;gt; import 上述文件即可&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;问题1： 为什么我的IDEA是中文？&lt;/p&gt;

&lt;p&gt;解决1： 去plugins中把chinese那个插件停用了&lt;/p&gt;
</description>
				<pubDate>Fri, 27 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/Idea-in-windows</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/Idea-in-windows</guid>
			</item>
		
			<item>
				<title>vscode</title>
				<description>&lt;h1 id=&quot;vs-code-in-windows&quot;&gt;VS code in windows&lt;/h1&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://blog.csdn.net/weixin_44211968/article/details/122605298&quot;&gt;https://blog.csdn.net/weixin_44211968/article/details/122605298&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u014374175/article/details/81365130&quot;&gt;https://blog.csdn.net/u014374175/article/details/81365130&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;官网下载: &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;File -&amp;gt; preferences -&amp;gt; settings  各种配置&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;配置 Maven: UserSettings  改成本地的settings.xml  &lt;a href=&quot;/images/202205/settings-personal.xml&quot;&gt;settings-personal.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;配置 java home 和 maven path 
&lt;img src=&quot;/images/202205/20220528000432.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;
        &lt;h3 id=&quot;一个settingsjson的例子&quot;&gt;&lt;a href=&quot;/images/202205/settings.json&quot;&gt;一个settings.json的例子&lt;/a&gt;&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建spring 项目&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;打开命令选项板「Ctrl + Shift + P」；&lt;/li&gt;
        &lt;li&gt;键入Spring Initializr 开始生成Maven项目；&lt;/li&gt;
        &lt;li&gt;按照向导执行，选择依赖包，我在这选了 devTools（热部署扩展包）和 web两个。&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置启动项 点击「run」界面中下拉框 -&amp;gt; 「添加配置」按钮，VS Code 会给你自动配好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调试
&lt;img src=&quot;/images/202205/20220528000444.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Thu, 26 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/VS-code-in-windows</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/VS-code-in-windows</guid>
			</item>
		
	</channel>
</rss>
