<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mouse的博客</title>
		<description>记录学习生活工作的点滴</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>es-scroll</title>
				<description>&lt;h1 id=&quot;elasticsearch-scroll&quot;&gt;ElasticSearch Scroll&lt;/h1&gt;

&lt;p&gt;因为ES from+size 有10000限制，当然也可以通过修改index.max_result_window参数来修改，但是有更好的工具scroll。咱们就不修改参数了。 使用方式很简单， 只需在请求后加scroll字段，缓存上下文1m(1分钟). query中的”from”字段去掉即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET map1c/_search?scroll=1m
{
  &quot;query&quot;:{
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;range&quot;: {
            &quot;x&quot;: {
              &quot;gte&quot;: 0,
              &quot;lte&quot;: 0.1
            }
          }
        },
         {
          &quot;range&quot;: {
            &quot;y&quot;: {
              &quot;gte&quot;: 0,
              &quot;lte&quot;: 0.1
            }
          }
        }
      ]
    }
  },
  &quot;size&quot;:10000
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意返回值里有个游标, “_scroll_id”. 下次请求带上他就能继续往下翻页了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/WechatIMG61.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;下个请求就这么简单对不用写表名和query和size因为这个scroll_id中已经保存了上下文&quot;&gt;下个请求就这么简单，对，不用写表名和query和size。因为这个scroll_id中已经保存了上下文。&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST _search/scroll 
{
  &quot;scroll&quot;:&quot;10m&quot;,
  &quot;scroll_id&quot;:&quot;FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFmIyRklwWWUyVFNDd1BFcHhxZjk3VEEAAAAAAAFaDxZoNlhQZjhYd1FsYTBIUHpzb1phNEtB&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Thu, 24 Mar 2022 11:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/es-scroll</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/es-scroll</guid>
			</item>
		
			<item>
				<title>rocketmq-docker</title>
				<description>&lt;h1 id=&quot;rocketmq-docker-部署&quot;&gt;RocketMQ docker 部署&lt;/h1&gt;

&lt;p&gt;基础术语：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;生产者(Producer)&lt;/li&gt;
  &lt;li&gt;消费者(Consumer)&lt;/li&gt;
  &lt;li&gt;主题（Topic)  一类消息的集合&lt;/li&gt;
  &lt;li&gt;生产者组（Producer Group) 这类Producer 发送同一类消息。如果发送事务消息，且原始生产者在发送后崩溃，Broker Server 会联系同一组的生产者实例提交或回溯消费&lt;/li&gt;
  &lt;li&gt;消费者组（Consumer Group) 消费同一类消息，注意同一个group的消费者必须订阅相同的topic。可以方便的负载均衡和容错&lt;/li&gt;
  &lt;li&gt;代理服务器（Broker Server)  负责存储和转发消息，还存储元数据，包括消费者组、进度偏移、主题和队列消息&lt;/li&gt;
  &lt;li&gt;名字服务器 （Name Server) 路由消息的提供者。 根据主题获取 Broker IP 的地址列表&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考 &lt;a href=&quot;https://www.jianshu.com/p/706588323276&quot;&gt;https://www.jianshu.com/p/706588323276&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '3.5'
services:
  rmqnamesrv:
    image: foxiswho/rocketmq:server
    container_name: rmqnamesrv
    ports:
      - 9876:9876
    volumes:
      - ./data/logs:/opt/logs
      - ./data/store:/opt/store
    networks:
        rmq:
          aliases:
            - rmqnamesrv

  rmqbroker:
    image: foxiswho/rocketmq:broker
    container_name: rmqbroker
    ports:
      - 10909:10909
      - 10911:10911
    volumes:
      - ./data/logs:/opt/logs
      - ./data/store:/opt/store
      - ./data/brokerconf:/etc/rocketmq
    environment:
        NAMESRV_ADDR: &quot;rmqnamesrv:9876&quot;
        JAVA_OPTS: &quot; -Duser.home=/opt&quot;
        JAVA_OPT_EXT: &quot;-server -Xms128m -Xmx128m -Xmn128m&quot;
    #command: mqbroker -c /etc/rocketmq/broker.conf
    depends_on:
      - rmqnamesrv
    networks:
      rmq:
        aliases:
          - rmqbroker

  rmqconsole:
    image: apacherocketmq/rocketmq-dashboard
    container_name: rmqdashboard
    ports:
      - 8080:8080
    environment:
        JAVA_OPTS: &quot;-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;
    depends_on:
      - rmqnamesrv
    networks:
      rmq:
        aliases:
          - rmqconsole

networks:
  rmq:
    name: rmq
    driver: bridge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sudo vi ./data/brokerconf/broker.conf&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the &quot;License&quot;); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


# 所属集群名字
brokerClusterName=DefaultCluster

# broker 名字，注意此处不同的配置文件填写的不一样，如果在 broker-a.properties 使用: broker-a,
# 在 broker-b.properties 使用: broker-b
brokerName=broker-a

# 0 表示 Master，&amp;gt; 0 表示 Slave
brokerId=0

# nameServer地址，分号分割
# namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876

# 启动IP,如果 docker 报 com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &amp;lt;192.168.0.120:10909&amp;gt; failed
# 解决方式1 加上一句 producer.setVipChannelEnabled(false);，解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP
# brokerIP1=192.168.0.253

# 在发送消息时，自动创建服务器不存在的topic，默认创建的队列数
defaultTopicQueueNums=4

# 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭 ！！！这里仔细看是 false，false，false
autoCreateTopicEnable=true

# 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭
autoCreateSubscriptionGroup=true

# Broker 对外服务的监听端口
listenPort=10911

# 删除文件时间点，默认凌晨4点
deleteWhen=04

# 文件保留时间，默认48小时
fileReservedTime=120

# commitLog 每个文件的大小默认1G
mapedFileSizeCommitLog=1073741824

# ConsumeQueue 每个文件默认存 30W 条，根据业务情况调整
mapedFileSizeConsumeQueue=300000

# destroyMapedFileIntervalForcibly=120000
# redeleteHangedFileInterval=120000
# 检测物理文件磁盘空间
diskMaxUsedSpaceRatio=88
# 存储路径
# storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store
# commitLog 存储路径
# storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog
# 消费队列存储
# storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue
# 消息索引存储路径
# storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index
# checkpoint 文件存储路径
# storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint
# abort 文件存储路径
# abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort
# 限制的消息大小
maxMessageSize=65536

# flushCommitLogLeastPages=4
# flushConsumeQueueLeastPages=2
# flushCommitLogThoroughInterval=10000
# flushConsumeQueueThoroughInterval=60000

# Broker 的角色
# - ASYNC_MASTER 异步复制Master
# - SYNC_MASTER 同步双写Master
# - SLAVE
brokerRole=ASYNC_MASTER

# 刷盘方式
# - ASYNC_FLUSH 异步刷盘
# - SYNC_FLUSH 同步刷盘
flushDiskType=ASYNC_FLUSH

# 发消息线程池数量
# sendMessageThreadPoolNums=128
# 拉消息线程池数量
# pullMessageThreadPoolNums=128
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意上面的配置：如果宿主机无法请求到broker， 是因为ip配置 ,&lt;/p&gt;
&lt;h3 id=&quot;解决方式1-加上一句-producersetvipchannelenabledfalse&quot;&gt;解决方式1 加上一句 producer.setVipChannelEnabled(false);&lt;/h3&gt;
&lt;h3 id=&quot;解决方式2-brokerip1-设置宿主机ip不要使用docker-内部ip&quot;&gt;解决方式2 brokerIP1 设置宿主机IP，不要使用docker 内部IP&lt;/h3&gt;
&lt;h3 id=&quot;brokerip11921680253&quot;&gt;brokerIP1=192.168.0.253&lt;/h3&gt;

</description>
				<pubDate>Wed, 23 Mar 2022 14:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/RocketMQ-docker</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/RocketMQ-docker</guid>
			</item>
		
			<item>
				<title>mongodb</title>
				<description>&lt;h1 id=&quot;mongodb-geo搜索测评&quot;&gt;MongoDB geo搜索测评&lt;/h1&gt;

&lt;p&gt;代码仓库：&lt;a href=&quot;https://github.com/gongchangyou/mongodb-test&quot;&gt;https://github.com/gongchangyou/mongodb-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;docker 安装MongoDB &lt;a href=&quot;https://www.runoob.com/docker/docker-install-mongodb.html&quot;&gt;https://www.runoob.com/docker/docker-install-mongodb.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;mongodb命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;如果刚刚创建了用户，进入db操作CRUD的之前记得认证
db.auth('admin','123456')

#查看所有db
show dbs

#写入
db.records.insertOne( {
  id:1,
  loc :  [ 55.5, 42.3 ]
} )


#find all
db.records.find( {} )

#创建地理索引
db.records.createIndex( { &quot;loc&quot;: &quot;2d&quot; } )

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;box搜索 &lt;a href=&quot;https://mongodb-documentation.readthedocs.io/en/latest/reference/operator/within.html#gsc.tab=0&quot;&gt;https://mongodb-documentation.readthedocs.io/en/latest/reference/operator/within.html#gsc.tab=0&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.records.find( {
   loc: { $geoWithin: { $box:  [ [ 0, 0 ], [ 100, 100 ] ] } }
} )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可惜没办法搜索热力图，即多个box 一起查询。1亿数据查询速度约20ms，单个box还行。&lt;/p&gt;

&lt;p&gt;注意： 默认的范围是 [-180,180] ，如果需要修改起止点范围&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;删除索引
dropIndex(”loc_2d&quot;)
重建索引
reIndex()

创建索引
db.records.createIndex( { &quot;loc&quot;: &quot;2d&quot; } , { min : 0, max : 100000 } )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Mon, 21 Mar 2022 11:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/mongodb-geo</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/mongodb-geo</guid>
			</item>
		
			<item>
				<title>gitlab-runner-docker</title>
				<description>&lt;h1 id=&quot;k8s&quot;&gt;k8s&lt;/h1&gt;

&lt;p&gt;文档1 &lt;a href=&quot;http://docs.kubernetes.org.cn/475.html&quot;&gt;http://docs.kubernetes.org.cn/475.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文档2  &lt;a href=&quot;https://kubernetes.io/zh/docs/reference/kubectl/cheatsheet/&quot;&gt;https://kubernetes.io/zh/docs/reference/kubectl/cheatsheet/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;常用的几个命令&quot;&gt;常用的几个命令:&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;查看各种对象
kubectl get deployments
kubectl get rs
kubectl get pods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl expose #将资源暴露为新的Kubernetes Service。在这里可以实现将宿主机的端口映射给容器,容器端口8000
kubectl expose rc nginx --port=80 --target-port=8000 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create # 创建一个Deployment
$ kubectl create -f https://kubernetes.io/docs/user-guide/nginx-deployment.yaml --record
deployment &quot;nginx-deployment&quot; created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Listen on port 8888 locally, forwarding to 5000 in the pod #端口转发
kubectl port-forward mypod 8888:5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;回退到历史版本-这个可以用jenkins做个job&quot;&gt;回退到历史版本, 这个可以用jenkins做个job&lt;/h3&gt;

&lt;p&gt;现在，我们可以决定回退当前的 rollout 到之前的版本：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl rollout undo deployment/nginx-deployment
deployment &quot;nginx-deployment&quot; rolled back
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;也可以使用 –revision参数指定某个历史版本：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl rollout undo deployment/nginx-deployment --to-revision=2
deployment &quot;nginx-deployment&quot; rolled back
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;扩容-这个可以用jenkins做个job手动扩容&quot;&gt;扩容, 这个可以用jenkins做个job手动扩容&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl scale deployment nginx-deployment --replicas 10
deployment &quot;nginx-deployment&quot; scaled

$ kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80
deployment &quot;nginx-deployment&quot; autoscaled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;灰度或者蓝绿发布-可以使用ingress&quot;&gt;灰度或者蓝绿发布 可以使用ingress&lt;/h3&gt;

&lt;p&gt;命令表 &lt;a href=&quot;http://docs.kubernetes.org.cn/683.html&quot;&gt;http://docs.kubernetes.org.cn/683.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Minikube 体验 &lt;a href=&quot;https://minikube.sigs.k8s.io/docs/start/&quot;&gt;https://minikube.sigs.k8s.io/docs/start/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#进入minikube终端
minikube ssh 
#如果docker pull 拉镜像太慢的话 可以直接进入终端 docker pull XXX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题1：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Exiting due to DRV_AS_ROOT: The &quot;docker&quot; driver should not be used with root privileges.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决1:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minikube start --force --driver=docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题2: k8s.gcr.io/echoserver:1.4 这个镜像拉不到，导致pod启动失败&lt;/p&gt;

&lt;p&gt;解决2： &lt;a href=&quot;https://v2as.com/article/fba7b8ff-e3e7-49bd-ab0b-31e517147e91&quot;&gt;https://v2as.com/article/fba7b8ff-e3e7-49bd-ab0b-31e517147e91&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pods  -o wide
查看pod状态是 ImagePullBackOff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minikube ssh
docker pull cilium/echoserver #换个镜像
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题3:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;an error occurred forwarding 7080 -&amp;gt; 8080: error forwarding port 8080 to pod b86addc13b414f05be12d736ee1904cc02d78c6e7e1889c6e45a76c3a1563e58, uid : exit status 1: 2022/03/18 07:14:31 socat[12900] E connect(5, AF=2 127.0.0.1:8080, 16): Connection refused
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决3: &lt;a href=&quot;https://github.com/kubernetes/minikube/issues/13176&quot;&gt;https://github.com/kubernetes/minikube/issues/13176&lt;/a&gt; 其实也没解决，mac就是这个问题。还是去linux系统操作好一些。&lt;/p&gt;

&lt;p&gt;问题4: ❌  Exiting due to DRV_NOT_HEALTHY: Found driver(s) but none were healthy. See above for suggestions how to fix installed drivers.  上面会给出解决方案，就是把用户加到docker组&lt;/p&gt;

&lt;p&gt;解决4:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo usermod -aG docker $USER &amp;amp;&amp;amp; newgrp docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如何 利用 nginx-ingress 请求spring boot项目 &lt;a href=&quot;https://blog.csdn.net/weixin_39637921/article/details/111281873&quot;&gt;https://blog.csdn.net/weixin_39637921/article/details/111281873&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要步骤：&lt;/p&gt;

 	1.  创建两个yaml文件。 分别对应RS和Service .kubectl create 
 	2. 创建Ingress Controller. 相当于是个内置的nginx，这样不需要外部配置nginx.conf
 	3. 创建Ingress ,定义规则，将不同域名的路由对应到不同的service
 	4. 测试效果，请求试试

</description>
				<pubDate>Thu, 17 Mar 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/k8s</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/k8s</guid>
			</item>
		
			<item>
				<title>gitlab-runner-docker</title>
				<description>&lt;h1 id=&quot;gitlab-runner-docker&quot;&gt;gitlab runner docker&lt;/h1&gt;

&lt;h3 id=&quot;docker容器集成&quot;&gt;docker容器集成&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#register-docker-runner&quot;&gt;https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#register-docker-runner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般来说除了shell，我们还希望集成docker容器，在docker中编译打包，并且打包成docker镜像，供k8s部署。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;注册一个新的runner，executor是docker的那种，不是上期说的shell&lt;/li&gt;
  &lt;li&gt;编辑你的.gitlab-ci.yml， 把image添加进去。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因为我们的gitlab-runner是docker启动的，所以先进入容器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker exec -it gitlab-runner bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;敲下面的命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   gitlab-runner register \
     --url &quot;https://gitlab.example.com/&quot; \
     --registration-token &quot;PROJECT_REGISTRATION_TOKEN&quot; \
     --description &quot;docker 各种描述&quot; \
     --executor &quot;docker&quot; \
     --template-config /tmp/test-config.template.toml \ ##这行先不需要，这个是模板，每个job都会去pull里面的镜像
     --docker-image docker:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后跟第一期一样，去gitlab的配置界面把工程的runner设置成上述runner.&lt;/p&gt;

&lt;h3 id=&quot;打包&quot;&gt;打包&lt;/h3&gt;

&lt;p&gt;修改.gitlab-ci.yml, 下面的这个image:maven:3-jdk-11 会保留在runner中，等下次再打包的时候就不会重新pull了&lt;/p&gt;

&lt;p&gt;一个springboot项目打包时间约4m,因为是在容器内打包， pom里面的依赖还是要重新下载一遍. TODO 看看能否通过数据卷映射的方式把 &lt;a href=&quot;https://stackoverflow.com/questions/39004369/how-do-i-mount-a-volume-in-a-docker-container-in-gitlab-ci-yml&quot;&gt;https://stackoverflow.com/questions/39004369/how-do-i-mount-a-volume-in-a-docker-container-in-gitlab-ci-yml&lt;/a&gt; 下载好的依赖映射进容器，这样就无需重新下载了,  加速打包过程。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stages:
  - build
  - publish
  - deploy

#打包
build-job:
  stage: build
  image: maven:3-jdk-11
#  script: &quot;mvn package -B&quot;
  script:
    - echo &quot;Hello, $GITLAB_USER_LOGIN!&quot;
    - mvn package -B
  artifacts:
    paths:
      - target/*.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;上传docker镜像&quot;&gt;上传docker镜像&lt;/h3&gt;

&lt;p&gt;在.gitlab-ci.yml中添加如下配置&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;publish:
  stage: publish
  only:
    - master
  image: docker:19.03.14
  services:
    - name: docker:19.03.14-dind
      alias: docker
      command: [&quot;--insecure-registry=172.16.102.20:5005&quot;]
  script:
    - docker build -t $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME/preprocess:$CI_COMMIT_SHORT_SHA -f Dockerfile .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME/preprocess:$CI_COMMIT_SHORT_SHA

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题1：  msg=”failed to dial gRPC: cannot connect to the Docker daemon. Is ‘docker daemon’ running on this host?: dial tcp: lookup docker on 10.10.10.12:53: no such host”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/WechatIMG54.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;往上翻到一个warning，应该是dind service没成功启动&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/WechatIMG55.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解决1：&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1544&quot;&gt;https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1544&lt;/a&gt; 这篇文章说 要加个参数 “privileged = true” 改了之后重启gitlab-runner&lt;/p&gt;

&lt;p&gt;问题2： Cannot connect to the Docker daemon at tcp://docker:2375. Is the docker daemon running?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/WechatIMG56.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解决2： 害得是业界良心啊 &lt;a href=&quot;https://stackoverflow.com/questions/61105333/cannot-connect-to-the-docker-daemon-at-tcp-localhost2375-is-the-docker-daem&quot;&gt;https://stackoverflow.com/questions/61105333/cannot-connect-to-the-docker-daemon-at-tcp-localhost2375-is-the-docker-daem&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; services:
    - name: docker:19.03.14-dind
      alias: docker-dind #这个别名下面有用
      command: [&quot;--insecure-registry=172.16.102.20:5005&quot;]
  variables:
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    DOCKER_HOST: tcp://docker-dind:2375/
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;部署&quot;&gt;部署&lt;/h3&gt;

&lt;p&gt;现在docker镜像已经打包并上传好了。如何配置 .gitlab-ci.yml 启动他呢？&lt;/p&gt;

&lt;p&gt;网上很多文章，都是本机启动 docker run,类似如下配置， 这样都是单机的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stages:
  - deploy

docker-deploy:
  stage: deploy  # 执行Job内容
  script:    # 通过Dockerfile生成cicd-demo镜像
    - docker build -t cicd-demo .    # 删除已经在运行的容器
    - if [ $(docker ps -aq --filter name= cicd-demo) ]; then docker rm -f cicd-demo;fi
    # 通过镜像启动容器，并把本机8000端口映射到容器8000端口
    - docker run -d -p 8000:8000 --name cicd-demo cicd-demo
  tags:    # 执行Job的服务器
    - kun
  only:    # 只有在master分支才会执行
    - master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们线上环境肯定是分布式的，那我们如何将gitlab 集成k8s呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;先在gitlab添加 k8s cluster  &lt;img src=&quot;/images/202203/WechatIMG57.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用k8s 设置deployment  neuroviz-server-java  TODO 这个deployment.yaml不好写啊&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. kubectl create deployment neuroviz-server-java 
2. kubectl expose deployment neuroviz-server-java --type=NodePort --port=8090 --target-port=8080
3. kubectl get services neuroviz-server-java
   
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把.gitlab-ci.yml 加上如下配置,  重点是 set image 命令 &lt;a href=&quot;http://docs.kubernetes.org.cn/670.html#i-2&quot;&gt;http://docs.kubernetes.org.cn/670.html#i-2&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy:
  only:
    - master
  stage: deploy
  image:     
    name: bitnami/kubectl:latest
    entrypoint: [&quot;&quot;]
  script:
    - export HOME=/tmp
    - kubectl config set-cluster k8s --server=$K8S_SERVER --certificate-authority=$K8S_CERT --embed-certs=true
    - kubectl config set-credentials k8s-gitlab --token=$K8S_TOKEN
    - kubectl config set-context k8s --cluster=k8s --user=k8s-gitlab
    - kubectl config use-context k8s
    - kubectl set image deployment/neuroviz-server-java master=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 16 Mar 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/gitlab-runner-docker</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/gitlab-runner-docker</guid>
			</item>
		
			<item>
				<title>es-heatmap</title>
				<description>&lt;h1 id=&quot;elasticsearch-热力图性能测评&quot;&gt;ElasticSearch 热力图性能测评&lt;/h1&gt;

&lt;p&gt;代码仓库：&lt;a href=&quot;https://github.com/gongchangyou/elasticsearch-test&quot;&gt;https://github.com/gongchangyou/elasticsearch-test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上述仓库里面也有建立索引+bulk批量创建数据的测试代码 ,1亿数据一会儿就能创建好&lt;/p&gt;

&lt;p&gt;java客户端 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/introduction.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/introduction.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;创建索引: &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-create-index.html#_index_settings&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-create-index.html#_index_settings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;测试服务器8核,  线上环境会更好&lt;/p&gt;

&lt;p&gt;10000个点热力图40ms&lt;/p&gt;

&lt;p&gt;1000000 个点 热力图, 不测了。直接上7kw个点&lt;/p&gt;

&lt;p&gt;7kw 个点 热力图&lt;/p&gt;

&lt;p&gt;搜索10*10的矩形， 首次查询5-6s，效果还是非常不错的。&lt;/p&gt;

&lt;p&gt;搜索100*100的矩形， 首次查询10-11s.&lt;/p&gt;

&lt;p&gt;搜索1000*1000， 报错 “too_many_buckets_exception” 这是ES为了性能考虑。 我们尝试调大一点 2000000。实测23s左右耗时。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/WechatIMG51.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然实际情况更多的是查看局部，这样就会退化成500*500个bucket，这样查询耗时依然是10s左右，可以接受.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /_cluster/settings
{&quot;persistent&quot;: {&quot;search.max_buckets&quot;: 2000000}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在唯一的问题就是存储空间，7kw个点的是4g+ ，如果200个数据集将近1T。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/WechatIMG50.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题1： JacksonJsonpMapper NoClassDefFoundError&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &amp;lt;properties&amp;gt;
        &amp;lt;jakarta-json.version&amp;gt;2.0.1&amp;lt;/jakarta-json.version&amp;gt; #这里把版本号设置成2.0.1
        &amp;lt;java.version&amp;gt;11&amp;lt;/java.version&amp;gt;
    &amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题2： Missing [X-Elastic-Product] header.&lt;/p&gt;

&lt;p&gt;解决2： elasticsearch 升级下版本，7.17.0+&lt;/p&gt;

&lt;p&gt;问题3：  返回值大于100M&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java.io.IOException: entity content is too long [107665275] for the configured buffer limit [104857600]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决3:  别人的解决方案 &lt;a href=&quot;https://www.cnblogs.com/wwjj4811/p/15261125.html&quot;&gt;https://www.cnblogs.com/wwjj4811/p/15261125.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解决3：上述解决方案太复杂了，我觉得ES设置成100M上限还是挺有道理的，先看看我们本身的query，咱们这个步长因为精度问题可能在小数点后很多位，超出我们的需要，本身0.0004就够了，结果 0.00040000002，然后AggregationRange需要将float转换成String，所以这里字符串长度就长了许多。至此，我们就直接把小数点位数控制好即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; /**
     * 保留小数点后4位
     */
    private String decimal(float x){
        return String.format(&quot;%.4f&quot;, x);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/WechatIMG52.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意： 如果没做归一化的话，不需要使用geo_point 类别，否则插入、查询的时候会报错&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET map_geo/_search
{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: {
        &quot;match_all&quot;: {}
      },
      &quot;filter&quot;: {
        &quot;geo_bounding_box&quot;: {
          &quot;location&quot;: {
            &quot;top_left&quot;: {
              &quot;lat&quot;: 400,
              &quot;lon&quot;: 100
            },
            &quot;bottom_right&quot;: {
              &quot;lat&quot;: 30,
              &quot;lon&quot;: 71.12
            }
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;error&quot; : {
    &quot;root_cause&quot; : [
      {
        &quot;type&quot; : &quot;query_shard_exception&quot;,
        &quot;reason&quot; : &quot;couldn't validate latitude/ longitude values&quot;,
        &quot;index_uuid&quot; : &quot;zVEWBGbYSjO70J7-gmSGDQ&quot;,
        &quot;index&quot; : &quot;map_geo&quot;
      }
    ],
    &quot;type&quot; : &quot;search_phase_execution_exception&quot;,
    &quot;reason&quot; : &quot;all shards failed&quot;,
    &quot;phase&quot; : &quot;query&quot;,
    &quot;grouped&quot; : true,
    &quot;failed_shards&quot; : [
      {
        &quot;shard&quot; : 0,
        &quot;index&quot; : &quot;map_geo&quot;,
        &quot;node&quot; : &quot;h6XPf8XwQla0HPzsoZa4KA&quot;,
        &quot;reason&quot; : {
          &quot;type&quot; : &quot;query_shard_exception&quot;,
          &quot;reason&quot; : &quot;couldn't validate latitude/ longitude values&quot;,
          &quot;index_uuid&quot; : &quot;zVEWBGbYSjO70J7-gmSGDQ&quot;,
          &quot;index&quot; : &quot;map_geo&quot;,
          &quot;caused_by&quot; : {
            &quot;type&quot; : &quot;query_validation_exception&quot;,
            &quot;reason&quot; : &quot;Validation Failed: 1: [geo_bounding_box] top latitude is invalid: 400.0;&quot;
          }
        }
      }
    ]
  },
  &quot;status&quot; : 400
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如何加速范围查询？ 可以将范围作为keyword保存下来，下次term查询就快了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/tune-for-search-speed.html&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Tue, 15 Mar 2022 11:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/es-heatmap</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/es-heatmap</guid>
			</item>
		
			<item>
				<title>es-install</title>
				<description>&lt;h1 id=&quot;docker-install--elasticsearch&quot;&gt;Docker install  ElasticSearch&lt;/h1&gt;

&lt;h3 id=&quot;如果想部署-kibana--es--httpsquoeamastermediumcomdeploying-elasticsearch-and-kibana-with-docker-86a4ac78d851&quot;&gt;如果想部署 kibana + es ： &lt;a href=&quot;https://quoeamaster.medium.com/deploying-elasticsearch-and-kibana-with-docker-86a4ac78d851&quot;&gt;https://quoeamaster.medium.com/deploying-elasticsearch-and-kibana-with-docker-86a4ac78d851&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;docker pull&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; docker pull docker.elastic.co/kibana/kibana:8.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;docker-compose.yml&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '2.2'
services:
  node01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.0
    container_name: node01
    environment:
      - node.name=node01
      - cluster.name=es-cluster-7
      - discovery.type=single-node
      - xpack.security.enabled=false
      - &quot;ES_JAVA_OPTS=-Xms12G -Xmx12G&quot;
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - es-network
   
  kibana:
    image: docker.elastic.co/kibana/kibana:8.1.0
    environment:
      ELASTICSEARCH_HOSTS: http://node01:9200
    ports:
      - 5601:5601
    networks:
      - es-network
    depends_on:
      - node01
   
volumes:
  es-data01:
    driver: local
   
networks:
  es-network:
    driver: bridge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;docker-compose up&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览器 访问 http://localhost:5601/&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://10.10.48.194:5601/app/dev_tools#/console #dev tool 可以直接敲命令
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注意：最好把版本升级下 7.11.1 -&amp;gt; 7.17.0，因为java的客户端 8.1.0会报错 Missing [X-Elastic-Product] header.&lt;/p&gt;

&lt;p&gt;如果要压测的话，上面的jvm内存调大一点，至少10G吧.   如果想要使用kNN查询的话，最好把版本升到8.0以上，比如8.1.0. &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/knn-search-api.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/knn-search-api.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;热力图可视化  &lt;a href=&quot;https://www.freesion.com/article/72491420060/&quot;&gt;https://www.freesion.com/article/72491420060/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;重点是要在stack management中创建index pattern!! 否则无法在Visualize 页面创建关于这个index的可视化界面&lt;/p&gt;

&lt;p&gt;可以点击inspect 看request 语句&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202203/WechatIMG49.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET users/_search 
{
  &quot;aggs&quot;: {
    &quot;2&quot;: {
      &quot;terms&quot;: {
        &quot;field&quot;: &quot;country.keyword&quot;,
        &quot;order&quot;: {
          &quot;_count&quot;: &quot;desc&quot;
        },
        &quot;size&quot;: 2
      },
      &quot;aggs&quot;: {
        &quot;3&quot;: {
          &quot;terms&quot;: {
            &quot;field&quot;: &quot;age&quot;,
            &quot;order&quot;: {
              &quot;_count&quot;: &quot;desc&quot;
            },
            &quot;size&quot;: 2
          }
        }
      }
    }
  },
  &quot;size&quot;: 0,
  &quot;fields&quot;: [],
  &quot;script_fields&quot;: {},
  &quot;stored_fields&quot;: [
    &quot;*&quot;
  ],
  &quot;_source&quot;: {
    &quot;excludes&quot;: []
  },
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [],
      &quot;filter&quot;: [
        {
          &quot;match_all&quot;: {}
        }
      ],
      &quot;should&quot;: [],
      &quot;must_not&quot;: []
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;坐标系的热力图的 query&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;get users/_search
{
  &quot;aggs&quot;: {
    &quot;2&quot;: {
      &quot;range&quot;: {
        &quot;field&quot;: &quot;age&quot;,
        &quot;ranges&quot;: [
          {
            &quot;to&quot;: 10,
            &quot;from&quot;: 0
          },
          {
            &quot;to&quot;: 20,
            &quot;from&quot;: 10
          },
          {
            &quot;to&quot;: 30,
            &quot;from&quot;: 20
          },
          {
            &quot;to&quot;: 37,
            &quot;from&quot;: 30
          }
        ],
        &quot;keyed&quot;: true
      },
      &quot;aggs&quot;: {
        &quot;2&quot;: {
          &quot;range&quot;: {
            &quot;field&quot;: &quot;age&quot;,
            &quot;ranges&quot;: [
              {
                &quot;to&quot;: 10,
                &quot;from&quot;: 0
              },
              {
                &quot;to&quot;: 20,
                &quot;from&quot;: 10
              },
              {
                &quot;to&quot;: 30,
                &quot;from&quot;: 20
              },
              {
                &quot;to&quot;: 40,
                &quot;from&quot;: 30
              }
            ],
            &quot;keyed&quot;: true
          }
        }
      }
    }
  },
  &quot;size&quot;: 0,
  &quot;fields&quot;: [],
  &quot;script_fields&quot;: {},
  &quot;stored_fields&quot;: [
    &quot;*&quot;
  ],
  &quot;_source&quot;: {
    &quot;excludes&quot;: []
  },
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [],
      &quot;filter&quot;: [
        {
          &quot;match_all&quot;: {}
        }
      ],
      &quot;should&quot;: [],
      &quot;must_not&quot;: []
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;附： docker-compose 安装 &lt;a href=&quot;https://docs.docker.com/compose/install/&quot;&gt;https://docs.docker.com/compose/install/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;单独部署-es&quot;&gt;单独部署 ES&lt;/h3&gt;

&lt;p&gt;官网 ： &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull docker.io/elasticsearch

docker network create elastic

docker run --name es01 --net elastic -p 9200:9200 -p 9300:9300 -it docker.elastic.co/elasticsearch/elasticsearch:8.1.0

docker cp es01:/usr/share/elasticsearch/config/certs/http_ca.crt .

curl --cacert http_ca.crt -u elastic https://localhost:9200 

输入docker run 时的password即可
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题1： 报错&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR: [1] bootstrap checks failed. You must address the points described in the following [1] lines before starting Elasticsearch.
bootstrap check failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]
ERROR: Elasticsearch did not exit normally - check the logs at /usr/share/elasticsearch/logs/docker-cluster.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虚拟内存太小了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim /etc/sysctl.conf 
vm.max_map_count=655360
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --name es01 --net elastic -p 9200:9200 -p 9300:9300 -it docker.elastic.co/elasticsearch/elasticsearch:8.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Mon, 14 Mar 2022 11:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/es</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/es</guid>
			</item>
		
			<item>
				<title>go-1</title>
				<description>&lt;h1 id=&quot;go1&quot;&gt;Go（1）&lt;/h1&gt;

&lt;p&gt;学习网站 &lt;a href=&quot;https://tiancaiamao.gitbooks.io/go-internals/content/zh/&quot;&gt;https://tiancaiamao.gitbooks.io/go-internals/content/zh/&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Fri, 11 Mar 2022 11:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/go(1)</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/go(1)</guid>
			</item>
		
			<item>
				<title>go-opengl-1</title>
				<description>&lt;h1 id=&quot;go-opengl1&quot;&gt;Go OpenGL（1）&lt;/h1&gt;

&lt;p&gt;官网教程 &lt;a href=&quot;https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/01%20OpenGL/#_3&quot;&gt;https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/01%20OpenGL/#_3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;学习使用的代码仓库 &lt;a href=&quot;https://github.com/gongchangyou/opengl-learn&quot;&gt;https://github.com/gongchangyou/opengl-learn&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Thu, 10 Mar 2022 11:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/opengl-go-1</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/opengl-go-1</guid>
			</item>
		
			<item>
				<title>go-opengl</title>
				<description>&lt;h1 id=&quot;go-opengl&quot;&gt;Go OpenGL&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;先安装一个 goland &lt;a href=&quot;https://www.jetbrains.com/zh-cn/go/&quot;&gt;https://www.jetbrains.com/zh-cn/go/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置GOROOT, GOPATH, 注意GO Modules配置成如下这样
&lt;img src=&quot;/images/202203/421646811018_.pic.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;
&lt;img src=&quot;/images/202203/401646810998_.pic.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;
&lt;img src=&quot;/images/202203/411646811008_.pic.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;proxy也设置一下
  &lt;img src=&quot;/images/202203/451646811683_.pic.jpg&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果要使用命令行的话 ，还需要 ~/.bash_profile中添加 ，并source ~/.bash_profile&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export GOPROXY=https://goproxy.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;去有 go.mod 的文件同级敲命令&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; go mod tidy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;external libraries中应该就引入了&lt;/p&gt;

&lt;p&gt;问题1: 多个文件时， go run main.go 会报错 某个函数undefined。&lt;/p&gt;

&lt;p&gt;两种解决方案：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将函数，变量等都挪到 main.go 里面&lt;/li&gt;
  &lt;li&gt;执行 go run *.go 而不是 go run main.go&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;问题2： ubuntu缺少组件库 会报错&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
root@mouse-Precision-3650-Tower:/home/mouse/Downloads/opengl-heatmap/trial# go run *.go
# pkg-config --cflags  -- gl gl
Package gl was not found in the pkg-config search path.
Perhaps you should add the directory containing `gl.pc'
to the PKG_CONFIG_PATH environment variable
No package 'gl' found
Package gl was not found in the pkg-config search path.
Perhaps you should add the directory containing `gl.pc'
to the PKG_CONFIG_PATH environment variable
No package 'gl' found
pkg-config: exit status 1
# github.com/go-gl/glfw/v3.3/glfw
In file included from ./glfw/src/internal.h:188,
                 from ./glfw/src/context.c:30,
                 from /root/go/pkg/mod/github.com/go-gl/glfw/v3.3/glfw@v0.0.0-20211213063430-748e38ca8aec/c_glfw.go:4:
./glfw/src/x11_platform.h:36:10: fatal error: X11/Xcursor/Xcursor.h: No such file or directory
   36 | #include &amp;lt;X11/Xcursor/Xcursor.h&amp;gt;
      |          ^~~~~~~~~~~~~~~~~~~~~~~
compilation terminated.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/go-gl/glfw/issues/129&quot;&gt;https://github.com/go-gl/glfw/issues/129&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;那就根据报错找到对应的lib 安装即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install libxcursor-dev

apt-get install libxinerama-dev

apt-get install libxrandr-dev

apt-get install libxi-dev

sudo apt-get install mesa-common-dev
sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev

sudo apt-get install Xxf86vm*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;问题3： ubuntu 如何查看opengl版本？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install mesa-utils
glxinfo | grep -i opengl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Thu, 10 Mar 2022 10:05:06 +0800</pubDate>
				<link>http://localhost:4000/2022/03/opengl-go</link>
				<guid isPermaLink="true">http://localhost:4000/2022/03/opengl-go</guid>
			</item>
		
	</channel>
</rss>
