<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mouse的博客</title>
		<description>记录学习生活工作的点滴</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>reflect</title>
				<description>&lt;h1 id=&quot;reflect&quot;&gt;reflect&lt;/h1&gt;

&lt;p&gt;反射取值的性能？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Slf4j
@SpringBootTest
public class ReflectTest {
    @Test
    void test() {
        val a = Node.builder()
                .name(&quot;a&quot;)
                .age(10)
                .node(SubNode.builder()
                        .name(&quot;sub_a&quot;)
                        .age(5)
                        .build())
                .build();

        val b = Node.builder()
                .name(&quot;a&quot;)
                .age(10)
                .node(SubNode.builder()
                        .name(&quot;sub_a&quot;)
                        .age(6)
                        .build())
                .build();

        val sw= new StopWatch();
        sw.start();
        for(int i = 0; i &amp;lt;1000; i++) {
            for(val f : a.getClass().getDeclaredFields()) {
                f.setAccessible(true);
                try {
                    f.get(a).equals(f.get(b));
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
                break;
            }
                //            log.info(&quot;result={}&quot;, isEqual(a, b));
        }
        sw.stop();
        log.info(sw.prettyPrint());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;字段数, 耗时&lt;/p&gt;

&lt;p&gt;100,  0.68ms&lt;/p&gt;

&lt;p&gt;1000, 3ms&lt;/p&gt;

&lt;p&gt;10000, 11ms&lt;/p&gt;

</description>
				<pubDate>Tue, 11 Oct 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/10/reflect</link>
				<guid isPermaLink="true">http://localhost:4000/2022/10/reflect</guid>
			</item>
		
			<item>
				<title>xmind</title>
				<description>&lt;h1 id=&quot;xmind&quot;&gt;Xmind&lt;/h1&gt;

&lt;p&gt;利用java api 读取代码，并自动生成 xmind&lt;/p&gt;

&lt;p&gt;类的依赖关系一目了然&lt;/p&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://juejin.cn/post/6844904012915933191&quot;&gt;https://juejin.cn/post/6844904012915933191&lt;/a&gt;
&lt;a href=&quot;https://blog.51cto.com/u_7932852/3753021&quot;&gt;https://blog.51cto.com/u_7932852/3753021&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 23 Sep 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/09/xmind</link>
				<guid isPermaLink="true">http://localhost:4000/2022/09/xmind</guid>
			</item>
		
			<item>
				<title>quic</title>
				<description>&lt;h1 id=&quot;quic&quot;&gt;quic&lt;/h1&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/270628018&quot;&gt;https://zhuanlan.zhihu.com/p/270628018&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Thu, 15 Sep 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/09/quic</link>
				<guid isPermaLink="true">http://localhost:4000/2022/09/quic</guid>
			</item>
		
			<item>
				<title>spel</title>
				<description>&lt;h1 id=&quot;spel&quot;&gt;SpEL&lt;/h1&gt;

&lt;p&gt;spring 是一个支持查询和操作运行时对象导航图功能的强大的表达式语言. 它的语法类似于传统EL.&lt;/p&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;http://itmyhome.com/spring/expressions.html&quot;&gt;http://itmyhome.com/spring/expressions.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6921491842865299469&quot;&gt;https://juejin.cn/post/6921491842865299469&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://spring.hhui.top/spring-blog/2020/05/18/200518-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BSpEL%E8%AF%AD%E6%B3%95%E6%89%AB%E7%9B%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E6%89%8B%E5%86%8C/&quot;&gt;https://spring.hhui.top/spring-blog/2020/05/18/200518-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BSpEL%E8%AF%AD%E6%B3%95%E6%89%AB%E7%9B%B2%E4%B8%8E%E6%9F%A5%E8%AF%A2%E6%89%8B%E5%86%8C/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/spring-expression-language&quot;&gt;https://www.baeldung.com/spring-expression-language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码仓库: &lt;a href=&quot;https://github.com/gongchangyou/spel_demo&quot;&gt;https://github.com/gongchangyou/spel_demo&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Tue, 13 Sep 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/09/SpEL</link>
				<guid isPermaLink="true">http://localhost:4000/2022/09/SpEL</guid>
			</item>
		
			<item>
				<title>udp</title>
				<description>&lt;h1 id=&quot;udp-multicast&quot;&gt;Udp multicast&lt;/h1&gt;

&lt;p&gt;因为传统的tcp 在金融领域的延迟太高了（1ms)&lt;/p&gt;

&lt;p&gt;一般选择udp，再添加定制化开发一些服务的保证。&lt;/p&gt;

</description>
				<pubDate>Mon, 05 Sep 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/09/udp</link>
				<guid isPermaLink="true">http://localhost:4000/2022/09/udp</guid>
			</item>
		
			<item>
				<title>b+tree</title>
				<description>&lt;h1 id=&quot;btree&quot;&gt;b+tree&lt;/h1&gt;

&lt;p&gt;因为 ignite 搜索后迭代效率有点低，所以找找看有没有现成的内存 B+树。&lt;/p&gt;

&lt;p&gt;开源的有btree4j 有 bug， 网上搜到的范围查询 要遍历所有节点，性能不佳，所以自行开发。&lt;/p&gt;

&lt;p&gt;代码仓库: &lt;a href=&quot;https://github.com/gongchangyou/dolphincache&quot;&gt;https://github.com/gongchangyou/dolphincache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://www.cnblogs.com/zzk0/p/14656189.html&quot;&gt;https://www.cnblogs.com/zzk0/p/14656189.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html&quot;&gt;https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 20 Aug 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/08/b+tree</link>
				<guid isPermaLink="true">http://localhost:4000/2022/08/b+tree</guid>
			</item>
		
			<item>
				<title>scope</title>
				<description>&lt;h1 id=&quot;scope&quot;&gt;Scope&lt;/h1&gt;

&lt;p&gt;如果不想bean 创建的是单例，只需要添加 @Scope(“prototype”) 注解即可&lt;/p&gt;

</description>
				<pubDate>Wed, 03 Aug 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/08/scope</link>
				<guid isPermaLink="true">http://localhost:4000/2022/08/scope</guid>
			</item>
		
			<item>
				<title>autowired</title>
				<description>&lt;h1 id=&quot;autowired-注入list&quot;&gt;autowired 注入list&lt;/h1&gt;

&lt;p&gt;代码仓库： &lt;a href=&quot;https://github.com/gongchangyou/spring_xml_test&quot;&gt;https://github.com/gongchangyou/spring_xml_test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;autowired 注入list  .  按照Order中的 数字 由小到大放入 list。&lt;/p&gt;

&lt;p&gt;如果要注入map。 就 @PostConstruct, stream 将list中的元素整理成map&lt;/p&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://cloud.tencent.com/developer/article/1420334&quot;&gt;https://cloud.tencent.com/developer/article/1420334&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Fri, 29 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/autowired-list</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/autowired-list</guid>
			</item>
		
			<item>
				<title>xml</title>
				<description>&lt;h1 id=&quot;xml&quot;&gt;Xml&lt;/h1&gt;

&lt;p&gt;代码仓库： &lt;a href=&quot;https://github.com/gongchangyou/spring_xml_test&quot;&gt;https://github.com/gongchangyou/spring_xml_test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接手了一个老项目，使用xml加载 bean对象 .&lt;/p&gt;

&lt;p&gt;如果想要混用，也行, 关键字是 @ImportResource(“classpath:beans.xml”)  自动加载xml中的bean&lt;/p&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://www.baeldung.com/spring-boot-xml-beans&quot;&gt;https://www.baeldung.com/spring-boot-xml-beans&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Thu, 28 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/xml</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/xml</guid>
			</item>
		
			<item>
				<title>poi</title>
				<description>&lt;h1 id=&quot;poi-excel-读写&quot;&gt;poi excel 读写&lt;/h1&gt;

&lt;p&gt;代码仓库：&lt;a href=&quot;https://github.com/gongchangyou/excelreader&quot;&gt;https://github.com/gongchangyou/excelreader&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;枚举项可以 利用 XSSFDataValidationConstraint 增加 数据有效性的 限制。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202207/WechatIMG357.png&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://blog.csdn.net/Janson_Lin/article/details/108379333&quot;&gt;https://blog.csdn.net/Janson_Lin/article/details/108379333&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Fri, 22 Jul 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/07/poi</link>
				<guid isPermaLink="true">http://localhost:4000/2022/07/poi</guid>
			</item>
		
	</channel>
</rss>
