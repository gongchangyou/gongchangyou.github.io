<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mouse的博客</title>
		<description>记录学习生活工作的点滴</description>
		<link>https://gongchangyou.github.io</link>
		<atom:link href="https://gongchangyou.github.io/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>memcache过期时间</title>
				<description>&lt;p&gt;memcache 过期时间的设置&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#define REALTIME_MAXDELTA 60*60*24*30  &lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel_time_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exptime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exptime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exptime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;REALTIME_MAXDELTA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#如果超过30天  &lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exptime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#又小于进程启动时间，直接失效  &lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_time_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_time_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exptime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#返回相对时间 exptime时间戳 - 进程启动时间  &lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#没超过30天的秒数，就是用当前运行时间+exptime  &lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_time_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exptime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#返回相对时间 服务器运行时间(从启动到现在的时间) + exptime  &lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当memcache的current_time不对，当(process_started + current_time)落后系统时间戳时，导致cache迟迟不过期,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/201710/F5C3A0FD-1B86-4D8E-8611-0AF63D8E7D02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;uptime就是运行时间&lt;br /&gt;
time是当前时间 （memcache启动时间 + uptime)&lt;br /&gt;
当电脑休眠时，memcache服务器的uptime不会增长，memcache的当前时间就不更新了！！ (uptime就是代码中的current_time)&lt;/p&gt;

&lt;font color=&quot;red&quot;&gt;如何处理？ 重启memcache  &lt;/font&gt;

&lt;p&gt;ps aux|grep memcache&lt;br /&gt;
kill -9 pid&lt;br /&gt;
/usr/bin/memcached -d restart -m 64 -p 11211 -u memcache -l 127.0.0.1&lt;/p&gt;

</description>
				<pubDate>Fri, 20 Oct 2017 11:25:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2017/10/memcache%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2017/10/memcache%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4</guid>
			</item>
		
			<item>
				<title>在sublime 2中添加php_beautifer </title>
				<description>&lt;p&gt;1.下载go-pear.phar 到php安装目录下，地址http://pear.php.net/go-pear.phar 。//macbook 无法放到/usr/bin 中，我随便放到了/User/gongchangyou/ 下 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2.cd /user/gongchangyou&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php go-pear.phar
一路回车
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.export PATH=”/Users/gongchangyou/pear/bin:$PATH” 将这行加到~/.bash_profile中，source ~/.bash_profile&lt;/p&gt;

&lt;p&gt;4.pear install –alldeps channel://pear.php.net/php_beautifier-0.1.15&lt;/p&gt;

&lt;p&gt;5.在Sublime text中安装beautifier插件,  按ctrl+shift+p 在package control中搜索install ,回车后稍等一下就会跳出好多插件,搜索phpbeautifier,回车安装&lt;/p&gt;

&lt;p&gt;6.重点来了: 去到sublime =&amp;gt; Preferences =&amp;gt; Browse Packages 打开PhpBeautifier/php_beautifier.py&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# cmd = &quot;php_beautifier&quot;
cmd = &quot;/Users/gongchangyou/pear/bin/php_beautifier&quot; #替换成之前第4步安装的php_beautifier的路径
如果有需求将class和function 的开启花括号放到下一行
filters = &quot;ArrayNested() NewLines(before=switch:while:for:foreach:T_CLASS:return:break) Pear(add-header=false,newline_class=true,newline_function=true)&quot; //这里需要加上newline_class=true,newline_function=true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7.试试ctrl+alt+f 或者 command+shift+p   搜索format php&lt;/p&gt;

</description>
				<pubDate>Sat, 30 Sep 2017 13:25:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2017/09/php_beautifier</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2017/09/php_beautifier</guid>
			</item>
		
			<item>
				<title>csv文件导入mysql</title>
				<description>&lt;p&gt;load data infile “/data/xlive/tools/masterdata/badwords.csv” &lt;br /&gt;
into table xlive.badwords character set utf8 FIELDS ESCAPED BY    ‘\’ TERMINATED BY     ‘,’ OPTIONALLY ENCLOSED BY ‘&#39;’ LINES TERMINATED BY   ‘\n’ ignore 1 lines;&lt;/p&gt;

&lt;p&gt;ERROR 1290 (HY000): The MySQL server is running with the –secure-file-priv option so it cannot execute this statement 
错误咋办？&lt;/p&gt;

&lt;p&gt;在/etc/my.cnf中添加
secure-file-priv=”/data/xlive/tools/masterdata/”&lt;/p&gt;

&lt;font style=&quot;color:red&quot;&gt;注意： csv文件中，逗号隔开，不要有空格&lt;/font&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://www.51testing.com/html/46/262846-837305.html&quot;&gt;替换mysql中某个字段的部分内容&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Wed, 13 Sep 2017 13:25:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2017/09/mysql-load-data</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2017/09/mysql-load-data</guid>
			</item>
		
			<item>
				<title>光照模型</title>
				<description>&lt;p&gt;标准光照模型&lt;/p&gt;

&lt;p&gt;漫反射&lt;/p&gt;

&lt;p&gt;C_diffuse = C_light * M_diffuse * max(0, dot(n,l))&lt;/p&gt;

&lt;p&gt;高光反射&lt;/p&gt;

&lt;p&gt;r = 2(n . l)n - l;&lt;/p&gt;

&lt;p&gt;C_specular = C_light * M_specular * power(max(0, dot(v, r)), M_gloss);&lt;/p&gt;

&lt;p&gt;C_specular = C_light * M_specular * power(max(0, dot(n, h)), M_gloss);&lt;/p&gt;
</description>
				<pubDate>Fri, 11 Nov 2016 13:24:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2016/11/shader%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2016/11/shader%E5%85%89%E7%85%A7%E6%A8%A1%E5%9E%8B</guid>
			</item>
		
			<item>
				<title>vim 查看空格</title>
				<description>&lt;p&gt;set listchars=tab:&amp;gt;-,trail:-&lt;/p&gt;
</description>
				<pubDate>Fri, 26 Aug 2016 13:24:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2016/08/vim-%E6%9F%A5%E7%9C%8Btab</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2016/08/vim-%E6%9F%A5%E7%9C%8Btab</guid>
			</item>
		
			<item>
				<title>mysqldump --tz-utc=0 的坑</title>
				<description>&lt;p&gt;mysqldump 时区对不上 用unix_timestamp 在mysql里面运行还是ok的 结果用mysqldump 就不对了&lt;/p&gt;

&lt;p&gt;InsertTime &amp;gt;= unix_timestamp(date_sub(curdate(), INTERVAL 1 DAY)) and InsertTime &amp;lt;= unix_timestamp(curdate())&lt;/p&gt;

&lt;p&gt;需要用–tz-utc=0 来设置默认时区，否则用的就是mysqldump在默认情况下，是按’+00:00’(中时区).&lt;/p&gt;

&lt;p&gt;mysqldump ${MYSQLDUMP_OPTION}  –databases ${database_schema} –tables ${database_table} –skip-opt –quick –single-transaction –hex-blob –no-create-info –tz-utc=0 –where “${mysqldump_where}” | grep INSERT &amp;gt; ${dump_file}&lt;/p&gt;

&lt;p&gt;http://www.linuxidc.com/Linux/2012-12/76184.htm&lt;/p&gt;
</description>
				<pubDate>Fri, 26 Aug 2016 13:24:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2016/08/mysqldump-%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98%E5%89%AF%E6%9C%AC</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2016/08/mysqldump-%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98%E5%89%AF%E6%9C%AC</guid>
			</item>
		
			<item>
				<title>ssh rsa</title>
				<description>&lt;p&gt;1.ssh-keygen  -t rsa&lt;/p&gt;

&lt;p&gt;2.在 ~/.ssh/config中添加&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	Host lfs-cn-manage 
	  HostName localhost  #这里写ip
	  User aiming
	  IdentityFile ~/.ssh/id_rsa.aiming
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.chmod 666 ~/.ssh/config #勿忘&lt;/p&gt;

&lt;p&gt;4.将pub key 添加到服务端的 ~/.ssh/authorized_keys 中&lt;/p&gt;

&lt;p&gt;搞定！&lt;/p&gt;

</description>
				<pubDate>Wed, 20 Jul 2016 13:24:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2016/07/ssh-%E4%BF%9D%E5%AD%98host%E5%92%8C%E8%AE%BE%E7%BD%AE%E5%88%AB%E5%90%8D</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2016/07/ssh-%E4%BF%9D%E5%AD%98host%E5%92%8C%E8%AE%BE%E7%BD%AE%E5%88%AB%E5%90%8D</guid>
			</item>
		
			<item>
				<title>nfs磁盘共享</title>
				<description>&lt;p&gt;A机器磁盘太小了  希望通过A机器的路径访问到 有剩余空间的B机器&lt;/p&gt;

&lt;p&gt;0.先进入到B机器，发现没有安装nfs service&lt;/p&gt;

&lt;p&gt;1，配置NFS服务端&lt;/p&gt;

&lt;p&gt;$ sudo yum install nfs-utils portmap  （适用centos 5）
$ sudo yum install nfs-utils rpcbind  （适用centos 6）&lt;/p&gt;

&lt;p&gt;2.sudo vi /etc/exports&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/var/log/big_query 10.140.69.97(rw)  //前面的是本地的路径 后面是A机器的ip rw是读写权限 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;参数说明：
rw：read-write，可读写；
ro：read-only，只读；
sync：同步写入（文件同时写入硬盘和内存），适用在通信比较频繁且实时性比较高的场合
async：异步写入（文件先写入内存，稍候再写入硬盘），性能较好（速度快），适合超大或者超多文件的写入，但有数据丢失的风险，比如突然断电等情况；
root_squash（默认）：将来访的root用户映射为匿名用户或用户组；
no_root_squash：来访的root用户保持root帐号权限（可能会不安全）；
no_all_squash（默认）：访问用户先与本机用户匹配，匹配失败后再映射为匿名用户或用户组；
all_squash：将来访的所有用户映射为匿名用户或用户组；
secure（默认）：限制客户端只能从小于1024的tcp/ip端口连接服务器；
insecure：允许客户端从大于1024的tcp/ip端口连接服务器；
anonuid：匿名用户的UID值，通常是nobody或nfsnobody，可以在此处自行设定；
anongid：匿名用户的GID值；
no_subtree_check：如果NFS输出的是一个子目录，则无需检查其父目录的权限（可以提高效率）&lt;/p&gt;

&lt;p&gt;3.sudo service nfs start //启动nfs服务 可以通过sudo service nfs status来查看当前状态&lt;/p&gt;

&lt;p&gt;4.激动人心的来了 去A服务器
	mount  10.140.99.122:/var/log/big_query  /var/path/of/local //前面的ip是B的ip 路径就是第2步中的路径 后面那个是A本地路径&lt;/p&gt;

</description>
				<pubDate>Thu, 07 Jul 2016 13:24:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2016/07/nfs%E5%85%B1%E4%BA%AB</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2016/07/nfs%E5%85%B1%E4%BA%AB</guid>
			</item>
		
			<item>
				<title>sed替换命令</title>
				<description>&lt;p&gt;&lt;a herf=&quot;http://my.oschina.net/shelllife/blog/118337&quot;&gt; http://my.oschina.net/shelllife/blog/118337&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下面是网上找到的一些用法，经实践效果是各不相同的，只有一种是完全可行的。&lt;/p&gt;

&lt;p&gt;sed ‘:label;N;s/\n/:/;b label’ filename&lt;/p&gt;

&lt;p&gt;sed ‘:label;N;s/\n/:/;t label’ filename&lt;/p&gt;

&lt;p&gt;上面的两条命令可以实现将文件中的所有换行符替换为指定的字串，如命令中的冒号。命令的解释：&lt;/p&gt;

&lt;p&gt;:label;  这是一个标签，用来实现跳转处理，名字可以随便取(label),后面的b label就是跳转指令&lt;/p&gt;

&lt;p&gt;N;  N是sed的一个处理命令，追加文本流中的下一行到模式空间进行合并处理，因此是换行符可见&lt;/p&gt;

&lt;p&gt;s/\n/:/;   s是sed的替换命令，将换行符替换为冒号&lt;/p&gt;

&lt;p&gt;b label  或者 t label    b / t 是sed的跳转命令，跳转到指定的标签处&lt;/p&gt;

&lt;p&gt;标签跳转和N的追加命令实现了每一行的不间断放入模式处理空间，从而不会漏掉每一个换行符，而没有标签的话跳转的话，就只能每两行替换掉一个换行符，对比效果：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$  echo “a,b,c,d”&lt;/td&gt;
      &lt;td&gt;sed ‘s/,/\n/g’&lt;/td&gt;
      &lt;td&gt;sed ‘:x;N;s/\n/,/;b x’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;a,b,c,d&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;$  echo “a,b,c,d”&lt;/td&gt;
      &lt;td&gt;sed ‘s/,/\n/g’&lt;/td&gt;
      &lt;td&gt;sed ‘N;s/\n/,/’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;a,b&lt;/p&gt;

&lt;p&gt;c,d&lt;/p&gt;

&lt;p&gt;&lt;a herf=&quot;http://blog.chinaunix.net/uid-26150691-id-3054317.html&quot;&gt;sed awk grep 筛选  http://blog.chinaunix.net/uid-26150691-id-3054317.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a herf=&quot;https://www.evernote.com/l/AKkZj1NmrPFIrIdnucubuEjEaLtAI5KjeVc&quot;&gt; sed awk grep 筛选 https://www.evernote.com/l/AKkZj1NmrPFIrIdnucubuEjEaLtAI5KjeVc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SVN_VERSION=&lt;code class=&quot;highlighter-rouge&quot;&gt;svn info |sed -n &#39;s/Revision: \(.*\)/\1/p&#39;&lt;/code&gt; #shell结果输出到变量 用`符号即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#在ssh之前先整理好参数 只要在ssh中 &#39;${ESCAPE_PATH}&#39;即可
SCRIPT_DIR=/var/home/aiming/world_all/bin/
ESCAPE_PATH=$(echo ${SCRIPT_DIR}tmp |sed &#39;s/\//\\\//g&#39;)
echo ${ESCAPE_PATH}
ssh aiming@lfs-cn-manage &quot;
cd ${SCRIPT_DIR}
echo &#39;${PUSH_CONTENT}&#39; &amp;gt; ${SCRIPT_DIR}tmp

./idc_world_all_update.sh update_notification &#39;${ESCAPE_PATH}&#39; 
&quot;
#&#39;\/var\/home\/aiming\/world_all\/bin\/tmp&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
				<pubDate>Thu, 07 Jul 2016 13:24:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2016/07/sed%E6%9B%BF%E6%8D%A2%E5%91%BD%E4%BB%A4</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2016/07/sed%E6%9B%BF%E6%8D%A2%E5%91%BD%E4%BB%A4</guid>
			</item>
		
			<item>
				<title>activity 别名</title>
				<description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;activity
        android:name=&quot;com.skymoons.zdbmgj.WXEntryActivity&quot;&amp;gt;&amp;lt;/activity&amp;gt; 
    &amp;lt;activity-alias
        android:name=&quot;.wxapi.WXEntryActivity&quot;
        android:targetActivity=&quot;com.skymoons.zdbmgj.WXEntryActivity&quot;
        android:exported=&quot;true&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;比如微信的接口只能用 .wxapi.WXEntryActivity 这个名字，现在 com.skymoons.zdbmgj.WXEntryActivity 用这个activity来代替&lt;/p&gt;

&lt;p&gt;记得在manifest之前 声明com.skymoons.zdbmgj.WXEntryActivity&lt;/p&gt;
</description>
				<pubDate>Fri, 01 Jul 2016 13:24:06 +0800</pubDate>
				<link>https://gongchangyou.github.io/2016/07/activity%E5%88%AB%E5%90%8D</link>
				<guid isPermaLink="true">https://gongchangyou.github.io/2016/07/activity%E5%88%AB%E5%90%8D</guid>
			</item>
		
	</channel>
</rss>
