<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Mouse的博客</title>
		<description>记录学习生活工作的点滴</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>dubbo</title>
				<description>&lt;h1 id=&quot;dubbo-源码解析&quot;&gt;Dubbo 源码解析&lt;/h1&gt;

&lt;h3 id=&quot;bean加载实例化&quot;&gt;bean加载，实例化&lt;/h3&gt;

&lt;p&gt;参考文章 &lt;a href=&quot;https://blog.csdn.net/leisurelen/article/details/107078066&quot;&gt;https://blog.csdn.net/leisurelen/article/details/107078066&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;示例代码仓库: &lt;a href=&quot;https://github.com/gongchangyou/bean&quot;&gt;https://github.com/gongchangyou/bean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BeanPostProcessor 的具体实现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Slf4j
public class AbstractAnnotationBeanPostProcessor implements BeanDefinitionRegistryPostProcessor, SmartInstantiationAwareBeanPostProcessor {
    public static final String BEAN_NAME = &quot;abstractAnnotationBeanPostProcessor&quot;;
    @Override
    @Nullable
    public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName)
            throws BeansException {
        final List&amp;lt;Object&amp;gt; elements = new LinkedList&amp;lt;&amp;gt;();
        ReflectionUtils.doWithFields(bean.getClass(), new ReflectionUtils.FieldCallback() {
            @Override
            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {
                if (field.getAnnotation(Dubbo.class)!=null) {
                    elements.add(field);
                    //可以在这里做一些根据初始化field的 操作
                    field.setAccessible(true);
                    field.set(bean, 3L);
                }
            }
        });
        log.info(&quot;beanName={} list={}&quot;,beanName,elements);
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将BeanPostProcessor注册到 BeanDefinition中:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG248.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;只需要在application上添加 @Import 注解即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG249.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;客户端调用&quot;&gt;客户端调用&lt;/h3&gt;

&lt;p&gt;自己整理了下客户端调用流程:
&lt;img src=&quot;/images/202205/dubbo_client.drawio.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题1： 当服务端切换ip时（比如蓝绿升级），客户端 invokers（里面有ip/port）是如何更新的？&lt;/p&gt;

&lt;p&gt;回答1: org.apache.dubbo.registry.nacos.NacosRegistry 会订阅nacos事件,每5分钟poll一次. 当nacos EventDispatcher中的listener.onEvent 触发时，会去变更RouterChain中的 invokers.
&lt;img src=&quot;/images/202205/WechatIMG246.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG247.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;服务端bean加载&quot;&gt;服务端bean加载&lt;/h3&gt;

&lt;p&gt;具体实现的 BeanDefinitionRegistryPostProcessor 是 ServiceClassPostProcessor. 他扫描packagesToScan 中类，解析DubboService 注解。那么他是何时被注册的呢？ 跟客户端bean加载一样，@Import (DubboComponentScanRegistrar.class)  . DubboComponentScanRegistrar中会注册 ServiceClassPostProcessor的子类 ServiceAnnotationBeanPostProcessor（已经不推荐使用了）&lt;/p&gt;

&lt;h3 id=&quot;服务端逻辑&quot;&gt;服务端逻辑&lt;/h3&gt;

&lt;p&gt;问题1：二进制字节流 如何解析 serviceName methodName parameters ?&lt;/p&gt;

&lt;p&gt;回答1：DecodeHandler 将 inputStream中的 buffer 转换成targetServiceUniqueName, methodName, arguments等
具体逻辑在 DecodeableRpcInvocation.decode(Channel channel, InputStream input) 中，应该就是dubbo协议的解析 其中in这个临时变量是根据channel中的serializationType 中确定的，这个也是SPI加载的， 默认是Hessian2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG253.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问题2： dubbo在收到报文后，如何给到对应的proxy去执行方法？
回答2:   DubboProtocol， 方法 getInvoker , 根据serviceKey(形如 dubbo-demo/com.braindata.dubbodemo.intf.StuRpcService:1.0.0:62604)  ，去exporterMap 获取对应的value，就是invoker了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG254.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Mon, 30 May 2022 09:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/Dubbo-source-code</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/Dubbo-source-code</guid>
			</item>
		
			<item>
				<title>CompletableFuture</title>
				<description>&lt;h1 id=&quot;completablefuture&quot;&gt;CompletableFuture&lt;/h1&gt;

&lt;p&gt;参考文章: &lt;a href=&quot;https://juejin.cn/post/6844903594165026829&quot;&gt;https://juejin.cn/post/6844903594165026829&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://colobu.com/2016/02/29/Java-CompletableFuture/&quot;&gt;https://colobu.com/2016/02/29/Java-CompletableFuture/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一个手动complete的例子&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    @Test
    void complete() {
        CompletableFuture cf = new CompletableFuture&amp;lt;String&amp;gt;();

        val cf1 = cf.thenApply((Object str) -&amp;gt; {
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return ((String)str).replace(&quot;a&quot;, &quot;d&quot;);
        });

        cf.complete(&quot;aad&quot;); //这里会触发cf后面的thenApply方法，上述的sleep会同步阻塞。

        try {
            val value = cf.get();
            val value1 = cf1.get(Integer.MAX_VALUE, TimeUnit.MILLISECONDS);
            log.info(&quot;value={} value1={}&quot;,value,value1);
        } catch (InterruptedException | ExecutionException | TimeoutException e) {
            e.printStackTrace();
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sun, 29 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/CompletableFuture</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/CompletableFuture</guid>
			</item>
		
			<item>
				<title>antrun</title>
				<description>&lt;h1 id=&quot;maven-antrun-plugin&quot;&gt;maven antrun plugin&lt;/h1&gt;

&lt;p&gt;有时候我们希望打包的时候添加一些行为，比如把文件从resource 文件夹下拷贝到另外一个地方.&lt;/p&gt;

&lt;p&gt;这时候就可以使用 maven antrun plugin.&lt;/p&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://maven.apache.org/plugins/maven-antrun-plugin/usage.html&quot;&gt;https://maven.apache.org/plugins/maven-antrun-plugin/usage.html&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;project&amp;gt;
  [...]
  &amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
      &amp;lt;plugin&amp;gt;
        &amp;lt;artifactId&amp;gt;maven-antrun-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.8&amp;lt;/version&amp;gt;
        &amp;lt;executions&amp;gt;
          &amp;lt;execution&amp;gt;
            &amp;lt;phase&amp;gt; &amp;lt;!-- Maven的生命周期阶段 --&amp;gt; &amp;lt;/phase&amp;gt;
            &amp;lt;configuration&amp;gt;
              &amp;lt;target&amp;gt;

                &amp;lt;!--
                  将任务Ant任务放在这里，还可以在这里添加一个build.xml文件
                --&amp;gt;

              &amp;lt;/target&amp;gt;
            &amp;lt;/configuration&amp;gt;
            &amp;lt;goals&amp;gt;
              &amp;lt;goal&amp;gt;run&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
          &amp;lt;/execution&amp;gt;
        &amp;lt;/executions&amp;gt;
      &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
  &amp;lt;/build&amp;gt;
  [...]
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码仓库:   &lt;a href=&quot;https://github.com/gongchangyou/transactional&quot;&gt;https://github.com/gongchangyou/transactional&lt;/a&gt; 这里借用下transactional仓库演示一下&lt;/p&gt;

&lt;p&gt;直接打包， 就可以看到具体的target任务已经执行了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn package -Dmaven.test.skip=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sat, 28 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/maven-antrun-plugin</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/maven-antrun-plugin</guid>
			</item>
		
			<item>
				<title>idea</title>
				<description>&lt;h1 id=&quot;idea-in-windows&quot;&gt;Idea in windows&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;去官网下载  &lt;a href=&quot;https://www.jetbrains.com/zh-cn/idea/&quot;&gt;https://www.jetbrains.com/zh-cn/idea/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;插件安装 ：&lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Plugins&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;去 file -&amp;gt; settings 搜索maven 看看 maven的settings.xml 在哪里，备份下，然后把阿里云的源添加进去     &lt;a href=&quot;/images/202205/settings-personal.xml&quot;&gt;settings-personal.xml&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改idea内存&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/202205/idea_vm_options.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;下面这段我不知道从哪儿抄来的，其中最有用的就是 设置内存     -Xmx4096m&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# custom IntelliJ IDEA VM options
    
-Xms128m
-Xmx4096m
-XX:ReservedCodeCacheSize=240m
-XX:+UseCompressedOops
-Dfile.encoding=UTF-8
-XX:+UseConcMarkSweepGC
-XX:SoftRefLRUPolicyMSPerMB=50
-ea
-XX:CICompilerCount=2
-Dsun.io.useCanonCaches=false
-Djava.net.preferIPv4Stack=true
-Djdk.http.auth.tunneling.disabledSchemes=&quot;&quot;
-XX:+HeapDumpOnOutOfMemoryError
-XX:-OmitStackTraceInFastThrow
    
-XX:ErrorFile=$USER_HOME/java_error_in_idea_%p.log
-XX:HeapDumpPath=$USER_HOME/java_error_in_idea.hprof
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显示idea使用内存情况  右下角右键 选中 memory indicator (内存指示器)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更改主题 ：   &lt;a href=&quot;/images/202205/dark_theme.icls&quot;&gt;dark_theme.icls&lt;/a&gt;  个人比较喜欢这款糖果配色
file-&amp;gt; settings -&amp;gt; 搜索color scheme -&amp;gt; import 上述文件即可&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;问题1： 为什么我的IDEA是中文？&lt;/p&gt;

&lt;p&gt;解决1： 去plugins中把chinese那个插件停用了&lt;/p&gt;
</description>
				<pubDate>Fri, 27 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/Idea-in-windows</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/Idea-in-windows</guid>
			</item>
		
			<item>
				<title>vscode</title>
				<description>&lt;h1 id=&quot;vs-code-in-windows&quot;&gt;VS code in windows&lt;/h1&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://blog.csdn.net/weixin_44211968/article/details/122605298&quot;&gt;https://blog.csdn.net/weixin_44211968/article/details/122605298&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u014374175/article/details/81365130&quot;&gt;https://blog.csdn.net/u014374175/article/details/81365130&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;官网下载: &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;File -&amp;gt; preferences -&amp;gt; settings  各种配置&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;配置 Maven: UserSettings  改成本地的settings.xml  &lt;a href=&quot;/images/202205/settings-personal.xml&quot;&gt;settings-personal.xml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;配置 java home 和 maven path 
&lt;img src=&quot;/images/202205/20220528000432.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;
        &lt;h3 id=&quot;一个settingsjson的例子&quot;&gt;&lt;a href=&quot;/images/202205/settings.json&quot;&gt;一个settings.json的例子&lt;/a&gt;&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建spring 项目&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;打开命令选项板「Ctrl + Shift + P」；&lt;/li&gt;
        &lt;li&gt;键入Spring Initializr 开始生成Maven项目；&lt;/li&gt;
        &lt;li&gt;按照向导执行，选择依赖包，我在这选了 devTools（热部署扩展包）和 web两个。&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置启动项 点击「run」界面中下拉框 -&amp;gt; 「添加配置」按钮，VS Code 会给你自动配好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调试
&lt;img src=&quot;/images/202205/20220528000444.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
				<pubDate>Thu, 26 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/VS-code-in-windows</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/VS-code-in-windows</guid>
			</item>
		
			<item>
				<title>jdk</title>
				<description>&lt;h1 id=&quot;jdk-in-windows&quot;&gt;jdk in windows&lt;/h1&gt;

&lt;p&gt;参考文章：&lt;a href=&quot;https://blog.csdn.net/qq_45752401/article/details/121220471&quot;&gt;https://blog.csdn.net/qq_45752401/article/details/121220471&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一般都是64位系统， 我们去官网下载并安装 &lt;a href=&quot;https://www.oracle.com/java/technologies/downloads/#java11&quot;&gt;https://www.oracle.com/java/technologies/downloads/#java11&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;打开powershell 敲 java -version 如果能正常展示 就ok了， 如果没有，则可能需要配置下面的环境变量。&lt;/li&gt;
  &lt;li&gt;配置系统环境变量 右击“我的电脑”–&amp;gt;“高级”–&amp;gt;“环境变量”
    &lt;ol&gt;
      &lt;li&gt;JAVA_HOME环境变量。 
 &lt;img src=&quot;/images/202205/java_home.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;path环境变量
 &lt;img src=&quot;/images/202205/path.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;安装maven&quot;&gt;安装maven&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://phoenixnap.com/kb/install-maven-windows&quot;&gt;https://phoenixnap.com/kb/install-maven-windows&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Wed, 25 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/windows-install-jdk</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/windows-install-jdk</guid>
			</item>
		
			<item>
				<title>transactional</title>
				<description>&lt;h1 id=&quot;transactional注解&quot;&gt;Transactional注解&lt;/h1&gt;

&lt;p&gt;代码仓库: &lt;a href=&quot;https://github.com/gongchangyou/transactional&quot;&gt;https://github.com/gongchangyou/transactional&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其实 Mybatis plus中的 ServiceImpl 的save操作都已经是事务级别的了, 我们来试试，如果取消了这个transactional注解会发生什么.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG226.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比如现在有10个线程，同时更新id=1 的row .value ++ ，结果肯定不是10&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    private ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(10,10,0, TimeUnit.SECONDS, new LinkedBlockingQueue&amp;lt;&amp;gt;(10));

 @Test
    void unThreadSafe() {
        for (int i = 0; i &amp;lt; 10;i++) {
            threadPoolExecutor.submit(() -&amp;gt; {
                val model = testMapper.selectById(1L);
            log.info(&quot;start value={}&quot;, model.getValue());
            val ret = testMapper.updateById(com.mouse.transactional.repository.db.model.Test
                        .builder()
                        .id(1L)
                        .value(model.getValue() + 1)
                        .build()
                );
                log.info(&quot;ret={}&quot;, ret);
            });
        }

        try {
            Thread.sleep(2000L);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如何保证呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;我们做个事务方法, 这里使用select for update加行锁, 并添加 @Transactional注解&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @Slf4j
 @Service
 public class TestService extends ServiceImpl&amp;lt;TestMapper, Test&amp;gt; implements IService&amp;lt;Test&amp;gt; {

     @Transactional
     public void incr(long id) {
         val model = baseMapper.selectOne(new LambdaQueryWrapper&amp;lt;Test&amp;gt;()
                 .eq(com.mouse.transactional.repository.db.model.Test::getId, 1L)
                 .last(&quot; for update&quot;));
         log.info(&quot;value={}&quot;, model.getValue());
         model.setValue(model.getValue() + 1);
         updateById(model);
     }

 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试一下, 这回成了，test表的value正好加了10.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      private ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(10,10,0, TimeUnit.SECONDS, new LinkedBlockingQueue&amp;lt;&amp;gt;(10));

     @Test
     void TransactionalUpdate() {
         for (int i = 0; i &amp;lt; 10;i++) {
             threadPoolExecutor.submit(() -&amp;gt; {
                 testService.incr(1L);
             });
         }

         try {
             Thread.sleep(2000L);
         } catch (InterruptedException e) {
             e.printStackTrace();
         }
     }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当然如果抛异常的话，那么里面的操作就不执行. 如下手动抛出异常，里面的更新操作就不会执行。
&lt;img src=&quot;/images/202205/WechatIMG227.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;源码解析:&lt;/p&gt;

&lt;p&gt;核心逻辑在 spring-tx包中的 类 TransactionAspectSupport 中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG230.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Mon, 23 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/transactional</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/transactional</guid>
			</item>
		
			<item>
				<title>pojo</title>
				<description>&lt;h1 id=&quot;pojo-groovy&quot;&gt;Pojo groovy&lt;/h1&gt;

&lt;p&gt;代码仓库:  &lt;a href=&quot;https://github.com/gongchangyou/tool&quot;&gt;https://github.com/gongchangyou/tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自动生成pojo&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import com.intellij.database.model.DasTable
import com.intellij.database.util.Case
import com.intellij.database.util.DasUtil

/*
 * Available context bindings:
 *   SELECTION   Iterable&amp;lt;DasObject&amp;gt;
 *   PROJECT     project
 *   FILES       files helper
 */

typeMapping = [
  (~/(?i)int/)                      : &quot;Long&quot;,
  (~/(?i)float|double|decimal|real/): &quot;Double&quot;,
  (~/(?i)datetime|timestamp/)       : &quot;java.sql.Timestamp&quot;,
  (~/(?i)date/)                     : &quot;java.sql.Date&quot;,
  (~/(?i)time/)                     : &quot;java.sql.Time&quot;,
  (~/(?i)/)                         : &quot;String&quot;
]

FILES.chooseDirectoryAndSave(&quot;Choose directory&quot;, &quot;Choose where to store generated files&quot;) { dir -&amp;gt;
  SELECTION.filter { it instanceof DasTable }.each { generate(it, dir) }
}

def generate(table, dir) {
  def className = javaName(table.getName(), true)
  def fields = calcFields(table)
  def packageName = getPackageName(dir)
  new File(dir, className + &quot;.java&quot;).withPrintWriter { out -&amp;gt; generate(out, className, fields, packageName, table) }
}

def generate(out, className, fields, packageName, table) {
  out.println &quot;package $packageName&quot;
  out.println &quot;&quot;
  out.println &quot;&quot;
  out.println &quot;import com.baomidou.mybatisplus.annotation.IdType;\n&quot; +
          &quot;import com.baomidou.mybatisplus.annotation.TableId;\n&quot; +
          &quot;import com.baomidou.mybatisplus.annotation.TableName;\n&quot; +
          &quot;import lombok.AllArgsConstructor;\n&quot; +
          &quot;import lombok.Builder;\n&quot; +
          &quot;import lombok.Data;\n&quot; +
          &quot;import lombok.NoArgsConstructor;&quot;
    out.println &quot;&quot;
    out.println &quot;@Builder\n&quot; +
            &quot;@AllArgsConstructor\n&quot; +
            &quot;@NoArgsConstructor\n&quot; +
            &quot;@Data\n&quot; +
            &quot;@TableName(\&quot;${table.getName()}\&quot;)&quot;
    out.println &quot;public class $className {&quot;
  out.println &quot;&quot;
  fields.each() {
    if (it.comment != &quot;&quot;) {
        out.println &quot;  /**&quot;
        out.println &quot;   * ${it.comment}&quot;
        out.println &quot;   */&quot;
    }
      if (it.isPrimaryKey) {
          out.println &quot;  @TableId(type = IdType.AUTO)&quot;
      }
    out.println &quot;  private ${it.type} ${it.name};&quot;
  }
  out.println &quot;&quot;
//  fields.each() {
//    out.println &quot;&quot;
//    out.println &quot;  public ${it.type} get${it.name.capitalize()}() {&quot;
//    out.println &quot;    return ${it.name};&quot;
//    out.println &quot;  }&quot;
//    out.println &quot;&quot;
//    out.println &quot;  public void set${it.name.capitalize()}(${it.type} ${it.name}) {&quot;
//    out.println &quot;    this.${it.name} = ${it.name};&quot;
//    out.println &quot;  }&quot;
//    out.println &quot;&quot;
//  }
  out.println &quot;}&quot;
}

def calcFields(table) {
    DasUtil.getColumns(table).reduce([]) { fields, col -&amp;gt;
    def spec = Case.LOWER.apply(col.getDataType().getSpecification())
    def typeStr = typeMapping.find { p, t -&amp;gt; p.matcher(spec).find() }.value
    fields += [[
                 name : javaName(col.getName(), false),
                 type : typeStr,
                 comment : col.getComment(),
                 isPrimaryKey :  DasUtil.isPrimary(col),
                 annos: &quot;&quot;]]
  }
}

def javaName(str, capitalize) {
  def s = com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)
    .collect { Case.LOWER.apply(it).capitalize() }
    .join(&quot;&quot;)
    .replaceAll(/[^\p{javaJavaIdentifierPart}[_]]/, &quot;_&quot;)
  capitalize || s.length() == 1? s : Case.LOWER.apply(s[0]) + s[1..-1]
}

def getPackageName(dir) {
    return dir.toString().replaceAll(&quot;\\\\&quot;, &quot;.&quot;).replaceAll(&quot;/&quot;, &quot;.&quot;).replaceAll(&quot;^.*src(\\.main\\.java\\.)?&quot;, &quot;&quot;) + &quot;;&quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sat, 21 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/pojo-groovy</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/pojo-groovy</guid>
			</item>
		
			<item>
				<title>es 中文分词</title>
				<description>&lt;h1 id=&quot;es-中文分词&quot;&gt;ES 中文分词&lt;/h1&gt;

&lt;p&gt;这里使用 ES 8.2.0  所以建表不需要_doc关键字了。&lt;/p&gt;

&lt;h3 id=&quot;建表&quot;&gt;建表&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /table_1 
{
  &quot;mappings&quot;: {
     &quot;properties&quot;: { 
      &quot;title&quot;:    { &quot;type&quot;: &quot;text&quot;  }, 
      &quot;name&quot;:     { &quot;type&quot;: &quot;keyword&quot;  }, 
      &quot;description&quot;: {&quot;type&quot;: &quot;text&quot;},
      &quot;age&quot;:      { &quot;type&quot;: &quot;integer&quot; },  
      &quot;created&quot;:  {
        &quot;type&quot;:   &quot;date&quot;, 
        &quot;format&quot;: &quot;strict_date_optional_time||epoch_millis&quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;写入数据&quot;&gt;写入数据&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST table_1/_doc/1
{
  &quot;id&quot;: 1,
  &quot;name&quot;: &quot;文档名称&quot;,
  &quot;title&quot;: &quot;中文标题&quot;,
  &quot;description&quot;:&quot;文档描述&quot;,
  &quot;type&quot;:&quot;科普&quot;,
  &quot;score&quot;: 96
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;搜索&quot;&gt;搜索&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST table_1/_search
{
  &quot;query&quot;: {
    &quot;match_all&quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;should--or-子句&quot;&gt;should  (or) 子句&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST table_1/_search
{
  &quot;query&quot;: {
    &quot;bool&quot; : {
      &quot;should&quot;: [
        {&quot;term&quot;: {
&quot;title&quot;: &quot;中&quot;
}},
{
&quot;term&quot;: {
&quot;title&quot;: &quot;文&quot;
}
}
      ]
    }
    
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;中文搜索&quot;&gt;中文搜索&lt;/h3&gt;

&lt;p&gt;keyword 是全匹配，text有analyzer可以创建分词策略 . 多个field 对应 多个analyzer &lt;a href=&quot;https://blog.csdn.net/JineD/article/details/108845906&quot;&gt;https://blog.csdn.net/JineD/article/details/108845906&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-fields.html&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-fields.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;keyword 得全匹配才行， text默认的分词策略， 默认分词  “中文” =&amp;gt; “中” “文”  ，所以输入  “中文”无法命中，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG186.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;
&lt;img src=&quot;/images/202205/WechatIMG187.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;下拉搜索的场景-可以使用whitespace-analyzer&quot;&gt;下拉搜索的场景, 可以使用whitespace analyzer&lt;/h4&gt;
&lt;p&gt;保存的时候 写入 “中 中文 中文标 中文标题 文 文标 文标题 标题 题”&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT table_3
{
  &quot;mappings&quot;: {
      &quot;properties&quot;: {
        &quot;title&quot;: {
          &quot;type&quot;: &quot;text&quot;,
          &quot;analyzer&quot;: &quot;whitespace&quot;,
          &quot;fields&quot;: {
           
            &quot;standard&quot;: {
              &quot;type&quot;: &quot;text&quot;,
              &quot;analyzer&quot;: &quot;standard&quot;
            }
          }
        }
      }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG185.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;中文分词场景&quot;&gt;中文分词场景&lt;/h4&gt;

&lt;p&gt;IK分词 参考文章：&lt;a href=&quot;https://blog.csdn.net/weixin_40612128/article/details/123476150&quot;&gt;https://blog.csdn.net/weixin_40612128/article/details/123476150&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;记得把版本号改对&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elasticsearch-plugin -v install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v8.2.0/elasticsearch-analysis-ik-8.2.0.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT table_ik
{
  &quot;mappings&quot;: {
      &quot;properties&quot;: {
        &quot;title&quot;: {
          &quot;type&quot;: &quot;text&quot;,
          &quot;analyzer&quot;: &quot;whitespace&quot;,
          &quot;fields&quot;: {
            &quot;spy&quot;: {
              &quot;type&quot;: &quot;text&quot;,
              &quot;analyzer&quot;: &quot;ik_smart&quot;
            },
            &quot;standard&quot;: {
              &quot;type&quot;: &quot;text&quot;,
              &quot;analyzer&quot;: &quot;standard&quot;
            },
            &quot;fpy&quot;: {
              &quot;type&quot;: &quot;text&quot;,
              &quot;analyzer&quot;: &quot;ik_smart&quot;
            }
          }
        }
      }
    
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG188.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;after-search&quot;&gt;After Search&lt;/h3&gt;

&lt;p&gt;本质上是个where语句。 scroll查询 那样保存上下文，开销比较大。 注意这个search_after是开区间，不包括当前值97 ，所以尽量用一些唯一的值比如 id来search.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/202205/WechatIMG189.png&quot; alt=&quot;&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 20 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/ES-IK</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/ES-IK</guid>
			</item>
		
			<item>
				<title>cas</title>
				<description>&lt;h1 id=&quot;cas&quot;&gt;CAS&lt;/h1&gt;

&lt;p&gt;参考文章： &lt;a href=&quot;https://coderatwork.cn/posts/linux-cmpxchg/&quot;&gt;https://coderatwork.cn/posts/linux-cmpxchg/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unsafe.compareAndSetObject&lt;/p&gt;

&lt;p&gt;内部调用native cmpxchg汇编指令&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在多核环境中，一般还在指令前加上 LOCK 前缀，来保证指令执行的原子性（LOCK 前缀的主要功能应该是锁内存总线）。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
				<pubDate>Thu, 19 May 2022 10:25:06 +0800</pubDate>
				<link>http://localhost:4000/2022/05/CAS</link>
				<guid isPermaLink="true">http://localhost:4000/2022/05/CAS</guid>
			</item>
		
	</channel>
</rss>
